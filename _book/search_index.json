[
["index.html", "Analítica Urbana ¿Para quién es esto? Antes de empezar", " Analítica Urbana Antonio Vazquez Brust &amp; Angie Scetta 2020-04-12 ¿Para quién es esto? Este libro fue escrito pensando en aquellas personas que trabajan, investigan y enseñan en áreas relacionadas al hábitat urbano y sus políticas públicas. Antes de empezar Se requiere conocimiento básico del lenguaje de programación R, y del “paquete” de funciones para manipulación y visualización de datos llamado Tidyverse. Todo ello puede adquirirse pasando un tiempo con Ciencia de Datos para Gente Sociable, que además de gratuito y disponible en línea, es el manual que sirve como base para éste que están leyendo ahora. Ciencia de Datos para Gente Sociable vendría a ser la primera parte, que enseña los primeros pasos, y ahora entramos en técnicas especializadas. Para practicar los ejemplos que se explicarán a lo largo del libro es necesario instalar el lenguaje de programación R, y la interfaz gráfica RStudio Desktop. "],
["intro.html", "Capítulo 1 Introducción 1.1 Sobre la analítica urbana", " Capítulo 1 Introducción En el siglo XXI la humanidad se ha vuelto, de forma quizás definitiva, una especie urbana. La mayoría de las personas del planeta viven en ciudades, y muchísimas se han trasladado en los últimos años, en un proceso global de migración desde regiones rurales que aún continúa. Nuestras ciudades crecen muy rápido, superando nuestra capacidad de planificación, mientras el incremento de demanda generando una enorme presión sobre los servicios que las ciudades brindan. Es evidente que vamos a necesitar redoblar esfuerzos. Para llebar a cabo una gestión apropiada que permita sostener los servicios que las ciudades brindan, pero no sólo ello: también mejorar la calidad de vida de las personas que allí habitan, a la vez que preservamos el ambiente. ¿Cómo podemos prepararnos para semejante desafío desde nuestro lugar de urbanistas? Es aquí donde entran en juego los cambios tecnológicos ocurridos en los últimos años. Estos cambios presentan un gran desafío tanto en términos de gestión cómo de planificación urbana. Hasta ahora nunca habíamos podido acceder a tantos datos, ni a tanta capacidad para procesarlos, comprenderlos y utilizarlos para tomar mejores decisiones. Hoy en día todas las personas generamos datos en forma constante al interactuar con nuevas tecnologías. Cuando utilizamos el transporte público con algún sistema de boleto electrónico, cuando participamos en las redes sociales, o cuando utilizamos algún dispositivo digital, estamos generando una masiva cantidad de datos, que superan con creces el volumen, la variedad y la velocidad que existe en los clásicos registros administrativos que los gobiernos utilizan hace años. Entonces, entendiendo que las ciudades son los sitios donde más personas habitan, es lógico que allí se genere la mayor cantidad de información. Contar con estos grandes volúmenes de datos puede, y debe, servir para que los gobiernos tomen decisiones basadas en evidencia. Es decir, que puedan caracterizar, cuantificar, y comparar tanto los esfuerzos vertidos como los resultados logrados en los proyectos de gestión pública. Al contar con resultados y alternativas comparables para elegir la calidad vida de los ciudadanos. Pero ¿Cómo podemos hacer para aprovechar todos estos datos que se generan de forma masiva y constante? La respuesta es simple: Para comprender el presente y planificar el futuro aprovechando los datos de las ciudades debemos hacer uso de herramientas de analítica urbana, las cuales serán desarrolladas a lo largo de este libro. 1.1 Sobre la analítica urbana 1.1.0.1 ¿Qué es? La analítica urbana es un campo multidisciplinario que abarca conocimientos de tipo teórico sobre las cuestión urbana (que ayuda a pensar en el “qué”, en cuales son las preguntas de interés) junto a capacidades técnicas que habilitan el “cómo”: permiten extraer conocimiento de los datos para describir algo que ya sucedió (estadística descriptiva) y realizar predicciones de algo que ocurrirá (modelos predictivos). 1.1.0.2 ¿Para qué se usa? Las herramientas de analítica urbana se utilizan para entender a las ciudades y sus habitantes a partir de diferentes datos relacionados a los campos del hábitat, desarrollo urbano, medios de transporte, tráfico, salud, educación, o seguridad, entre otros. Las herramientas de análisis de datos en gran escala permiten estudiar dinámicas urbanas en su infinidad de vertientes, y extraer conclusiones que ayuden a diseñar y planificar políticas públicas apropiadas para los objetivos que se persigan. A lo largo de este libro vamos a aprender algunos ejemplos de casos de aplicación de herramientas de análisis especializadas. Entre ellas: acceso a información urbana georreferenciada desde repositorios online, herramientas de geo-procesamiento de datos, análisis de dinámicas espacio-temporales, análisis de flujos urbanos, y por último, predicción de datos a partir de técnicas de aprendizaje automático o Machine Learning. "],
["geoprocesamiento.html", "Capítulo 2 Geoprocesamiento 2.1 Cruces espaciales 2.2 Dataframes tradicionales y dataframes espaciales 2.3 Uniones 2.4 Intersecciones 2.5 Distancias 2.6 Cálculo de extensión (longitud, área)", " Capítulo 2 Geoprocesamiento Cuando tenemos información geográfica y queremos manipularla para generar nuevos datos que nos permitan hacer análisis espaciales, debemos utilizar diferentes herramientas de geoprocesamiento. Los geoprocesos son operaciones que se con capas geográficas, que para nosotros toman la forma de dataframes espaciales. Algunas de estas operaciones se aplican a una sola capa geográfica (como agregar un área de influencia alrededor de un polígono), y otras a varias (como calcular la interseción entre una línea y in porlígono, o estimar la distancia entre dos puntos). Existen operaciones para unir, recortar, disolver, borrar, fusionar, interseccionar, y calcular áreas de influencia (llamadas buffers), entre otras. En este capítulo aprenderemos a usar varias de ellas, incluidas en el paquete sf. 2.1 Cruces espaciales Hay ocasiones en que necesitamos cruzar datos de fuentes distintas en base a su ubicación geográfica. Es decir, un “join” que cruce registros en base a sus coordenadas espaciales, en lugar de otros atributos. Aquí va un ejemplo como guía para realizar el spatial join, o join espacial, que sólo puede ser realizado entre dataframes de tipo espacial. Paquetes que vamos a usar: library(tidyverse) library(sf) 2.2 Dataframes tradicionales y dataframes espaciales Vamos a trabajar con dos datasets. Uno contiene los alojamientos ofrecidos por Airbnb en Buenos Aires en Julio 2017. airbnb &lt;- read.csv(&quot;https://query.data.world/s/55amvafrknrgkeyeiu54yb2c6u6brc&quot;, stringsAsFactors = FALSE) names(airbnb) ## [1] &quot;room_id&quot; &quot;host_id&quot; &quot;room_type&quot; ## [4] &quot;country&quot; &quot;city&quot; &quot;neighborhood&quot; ## [7] &quot;address&quot; &quot;reviews&quot; &quot;overall_satisfaction&quot; ## [10] &quot;accommodates&quot; &quot;bedrooms&quot; &quot;bathrooms&quot; ## [13] &quot;price&quot; &quot;deleted&quot; &quot;minstay&quot; ## [16] &quot;last_modified&quot; &quot;latitude&quot; &quot;longitude&quot; ## [19] &quot;survey_id&quot; &quot;location&quot; &quot;coworker_hosted&quot; ## [22] &quot;extra_host_languages&quot; &quot;name&quot; &quot;property_type&quot; ## [25] &quot;currency&quot; &quot;rate_type&quot; Y el otro contiene los polígonos de las comunas porteñas: comunas &lt;- st_read(&#39;https://bitsandbricks.github.io/data/CABA_comunas.geojson&#39;) ## Reading layer `CABA_comunas&#39; from data source `https://bitsandbricks.github.io/data/CABA_comunas.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 15 features and 4 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -58.53152 ymin: -34.70529 xmax: -58.33514 ymax: -34.52754 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs Notemos que tenemos dos tipos de dataframe distintos. El de Airbnb es un dataframe “tradicional”, dado que todas sus columnas contiene valores simples: un número, un texto, un factor, etc. El dataframe de comunas es especial porque es “espacial”. Contiene una columna distinta a las demás, llamada “geometry” que en lugar de una observación simple contiene una lista con múltiples posiciones. Estas posiciones son los vértices que definen el polígono de cada comuna, y permiten la proyección en mapas y el cálculo de estadísticas espaciales. 2.2.1 Combinando datasets con información espacial Si lo único que queremos es visualizar en forma combinada la información que contienen, no hay problema en que un dataframe sea espacial y otro no, siempre y cuando éste último incluya una columna con latitud y otra con longitud para identificar la posición de cada registro. Dado que los datos de Airbnb incluyen lat/long, es fácil visualizarlos en conjunto con el dataframe espacial de las comunas: ggplot() + geom_sf(data = comunas) + geom_point(data = airbnb, aes(x = longitude, y = latitude), alpha = .3, color = &quot;orange&quot;) Dicho esto, si lo que queremos es combinar la información para su análisis cuantitativo, no nos alcanza con la visualización. Lo que tenemos que hacer es un “join espacial”, la técnica que permite cruzar datasets en base a sus atributos de ubicación geográfica. Sólo es posible hacer joins espaciales entre dataframes espaciales. Es por eso que los datos de Airbnb, así como están, no sirven para un join. ¡Pero! una vez más, dado que incluyen columnas de latitud y longitud, la solución es fácil. Podemos usar las columnas de lat/long para convertirlo en un dataset espacial hecho y derecho, así: airbnb &lt;- airbnb %&gt;% filter(!is.na(latitude), !is.na(longitude)) %&gt;% st_as_sf(coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) Tres cosas importantes a tener en cuenta: Un dataframe espacial no permite filas sin posición (sin coordenadas). Por eso antes de la conversión usamos filter(!is.na(latitude), !is.na(longitude)) para descartar los registros sin coordenadas del dataset de origen si los hubiera. La función st_as_sf() es la que toma un dataframe común y lo transforma en uno espacial. Con el parámetro coords = c(“longitude”, “latitude”) le definimos como se llaman las columnas de longitud y latitud, en ese orden. Obsérvese que toma los nombres entre comillas. El último parámetro, “crs”, es obligatorio y requiere el identificador del sistema de referencia de las coordenadas. Cuando se trata de datos capturados en internet (como aquí, por scraping del sitio de Airbnb), el crs siempre es 4326. Ahora que ambos dataframes son de tipo espacial, ambos se grafican con geom_sf() ggplot() + geom_sf(data = comunas) + geom_sf(data = airbnb, color = &quot;orange&quot;, alpha = .3) y más importante aún, se pueden combinar con un join espacial. La versión más simple, que combina atributos de las filas cuyas posiciones coinciden en el espacio, es así: airbnb_con_comunas &lt;- st_join(airbnb, comunas) El resultado es un dataframe con datos de Airbnb, que en cada fila incluye los datos de la comuna con la que coincide el alojamiento: head(airbnb_con_comunas) ## Simple feature collection with 6 features and 28 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -58.41829 ymin: -34.62068 xmax: -58.37914 ymax: -34.59101 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## room_id host_id room_type country city neighborhood ## 1 15125458 95870458 Private room NA NA NA ## 2 1691316 3380366 Private room NA NA NA ## 3 16069975 104686791 Private room NA NA NA ## 4 4470484 2034113 Private room NA NA NA ## 5 3564816 17949594 Private room NA NA NA ## 6 4479962 8875440 Private room NA NA NA ## address reviews overall_satisfaction accommodates bedrooms ## 1 Recoleta, Buenos Aires 23 4.5 1 1 ## 2 Palermo, Buenos Aires 106 5.0 2 1 ## 3 Recoleta, Buenos Aires 5 5.0 1 1 ## 4 Buenos Aires 102 4.5 2 1 ## 5 San Nicolás, Buenos Aires 20 4.5 1 1 ## 6 Balvanera, Буэнос-Айрес 102 4.5 2 1 ## bathrooms price deleted minstay last_modified survey_id ## 1 NA 339 0 NA 2017-07-03T17:52:23Z 1 ## 2 NA 559 0 NA 2017-07-03T17:52:26Z 1 ## 3 NA 254 0 NA 2017-07-03T17:52:26Z 1 ## 4 NA 441 0 NA 2017-07-03T17:52:26Z 1 ## 5 NA 390 0 NA 2017-07-03T17:52:26Z 1 ## 6 NA 424 0 NA 2017-07-03T17:52:26Z 1 ## location coworker_hosted ## 1 0101000020E61000000FB743C362324DC0B1DEA815A64B41C0 NA ## 2 0101000020E6100000780E65A88A354DC08A027D224F4C41C0 NA ## 3 0101000020E610000002D4D4B2B5324DC0B5C2F4BD864C41C0 NA ## 4 0101000020E6100000187C9A9317314DC04293C492724F41C0 NA ## 5 0101000020E61000004FC939B187304DC03D29931ADA4C41C0 NA ## 6 0101000020E6100000A6272CF180324DC0A88FC01F7E4E41C0 NA ## extra_host_languages name property_type ## 1 {en} Habitacion privada en Recoleta Apartment ## 2 {en} Palermo Cozy room wprivate bathroom House ## 3 {en} Habitacion Recoleta, Confort Condominium ## 4 {} The Flan Room- Palacio Nr San Telmo House ## 5 {en} &quot;Antique&quot; room @ El Centro Apartment ## 6 {} Private room - Congreso House ## currency rate_type ## 1 ARS nightly ## 2 ARS nightly ## 3 ARS nightly ## 4 ARS nightly ## 5 ARS nightly ## 6 ARS nightly ## barrios ## 1 RECOLETA ## 2 PALERMO ## 3 RECOLETA ## 4 CONSTITUCION - MONSERRAT - PUERTO MADERO - RETIRO - SAN NICOLAS - SAN TELMO ## 5 CONSTITUCION - MONSERRAT - PUERTO MADERO - RETIRO - SAN NICOLAS - SAN TELMO ## 6 BALVANERA - SAN CRISTOBAL ## perimetro area comunas geometry ## 1 21246.61 6140873 2 POINT (-58.39364 -34.59101) ## 2 21768.07 15772496 14 POINT (-58.41829 -34.59616) ## 3 21246.61 6140873 2 POINT (-58.39617 -34.59786) ## 4 35572.65 17802807 1 POINT (-58.38353 -34.62068) ## 5 35572.65 17802807 1 POINT (-58.37914 -34.60041) ## 6 10486.26 6385991 3 POINT (-58.39456 -34.61322) Con los atributos adicionales, podemos realizar sumarios por comuna de los alojamientos: airbnb_con_comunas %&gt;% group_by(comunas) %&gt;% summarise(cantidad = n()) ## Simple feature collection with 16 features and 2 fields ## geometry type: GEOMETRY ## dimension: XY ## bbox: xmin: -58.7976 ymin: -34.82524 xmax: -58.18856 ymax: -34.41952 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## # A tibble: 16 x 3 ## comunas cantidad geometry ## * &lt;fct&gt; &lt;int&gt; &lt;GEOMETRY [°]&gt; ## 1 1 2100 MULTIPOINT (-58.39242 -34.60016, -58.39235 -34.60115, -58.3… ## 2 10 18 MULTIPOINT (-58.52669 -34.62379, -58.52227 -34.61793, -58.5… ## 3 11 34 MULTIPOINT (-58.52372 -34.60679, -58.51784 -34.61295, -58.5… ## 4 12 163 MULTIPOINT (-58.51262 -34.58124, -58.50698 -34.56917, -58.5… ## 5 13 670 MULTIPOINT (-58.47438 -34.53906, -58.47433 -34.55242, -58.4… ## 6 14 3281 MULTIPOINT (-58.44776 -34.56799, -58.44745 -34.56847, -58.4… ## 7 15 500 MULTIPOINT (-58.49529 -34.593, -58.48774 -34.58506, -58.486… ## 8 2 1659 MULTIPOINT (-58.41587 -34.59755, -58.41514 -34.5967, -58.41… ## 9 3 468 MULTIPOINT (-58.41385 -34.61058, -58.41363 -34.60651, -58.4… ## 10 4 136 MULTIPOINT (-58.4205 -34.64693, -58.42022 -34.64792, -58.41… ## 11 5 422 MULTIPOINT (-58.4313 -34.6024, -58.43129 -34.60154, -58.431… ## 12 6 184 MULTIPOINT (-58.45786 -34.60974, -58.45726 -34.61023, -58.4… ## 13 7 62 MULTIPOINT (-58.47123 -34.62169, -58.47018 -34.62031, -58.4… ## 14 8 1 POINT (-58.46999 -34.66616) ## 15 9 15 MULTIPOINT (-58.5287 -34.64678, -58.52213 -34.63636, -58.51… ## 16 &lt;NA&gt; 210 MULTIPOINT (-58.7976 -34.66354, -58.69091 -34.47598, -58.68… El resultado de un join espacial también es un dataframe espacial, así que podemos visualizarlo de la manera habitual (y ahora tenemos más variables para graficar). ggplot() + geom_sf(data = comunas) + geom_sf(data = airbnb_con_comunas, aes(color = comunas)) 2.2.2 Coropletas Hasta acá obtuvimos un dataframe espacial con la geometría de puntos proveniente de los datos de Airbnb y generamos una nueva columna que indica a que Comuna pertenece cada registro. Sin embargo, cuando tenemos muchos puntos concentrados en un mapa resulta difícil realizar un análisis visual que nos permita sacar conclusiones de los mismos. Para estos casoos sirven los mapas coropléticos, que muestran áreas geográficas (polígonos) coloreadas según alguna de las variables incluidas en el dataset. Entonces, ¿Cómo podemos hacer un mapa coroplético dándole color cada Comunas según la cantidad de propiedades que se alquilan? Veamos esto en detalle: Lo primero que debemos hacer es filtrar solo las propiedades que se ubican dentro de CABA y agruparlas por Comuna calculando la cantidad de observaciones que contiene cada una. Luego tenemos que hacer un left_join() entre el shape original con los polígonos de las Comunas y los datos que agrupamos: comunas &lt;- comunas %&gt;% left_join(airbnb_con_comunas %&gt;% filter(!is.na(comunas)) %&gt;% group_by(comunas) %&gt;% summarise(cantidad=n()) %&gt;% st_set_geometry(NULL), by=&quot;comunas&quot;) Ahora sí, ya estamos en condiciones de hacer nuestro primer mapa coroplético a partir de la unión de datos espaciales y no espaciales: ggplot() + geom_sf(data = comunas, aes(fill=cantidad)) + labs(title = &quot;Airbnb por Comuna&quot;, subtitle = &quot;Propiedades publicadas&quot;, fill = &quot;Cantidad&quot;, caption= &quot;Fuente: Airbnb 2017&quot;) + scale_fill_gradient(low=&quot;khaki2&quot;, high=&quot;deeppink4&quot;) Tal como se ve en el mapa, la Comuna 14 donde se encuentra solo el barrio de Palermo es la que más cantidad de propiedades tiene publicadas en Airbnb. Esto tiene sentido ya que Airbnb es un servicio orientado a turistas y Palermo es uno de los barrios donde más cantidad de atracciones turísticas hay. Sin embargo, para que estos datos sean comparables entre las 15 Comunas, lo correcto sería dividir la cantidad de observaciones por la superficie (ha) de cada una. ggplot() + geom_sf(data = comunas, aes(fill=(cantidad/area)*10000)) + labs(title = &quot;Airbnb por Comuna&quot;, subtitle = &quot;Densidad de propiedades publicadas&quot;, fill = &quot;Cantidad por ha&quot;, caption= &quot;Fuente: Airbnb 2017&quot;) + scale_fill_gradient(low=&quot;khaki2&quot;, high=&quot;deeppink4&quot;) Aquí pudimos ver que los resultados son similares a los del primer mapa coroplético ya que el corredor norte de la Ciudad sigue siendo la zona donde se concentra la mayor parte de la oferta. Pero si tenemos en cuenta la superficie total de las Comunas, la 2 (Recoleta) es la que más densidad de observaciones tiene, seguida por la Comuna 1. 2.3 Uniones Para unir capas de información geográfica utilizaremos st_union, que tiene 2 funcionalidades: 1. Combina la información de dos capas que se superponen, generando una capa única que contiene la suma de los atributos de ambas. Falta Ejemplo 2. Combina registros de una misma capa, generando una única capa con un solo dato. Veamos un ejemplo de esto donde transformaremos el shape de comunas en un shape con un único polígono del contorno de la Ciudad: caba &lt;- comunas %&gt;% st_union() ggplot()+ geom_sf(data=caba) + geom_sf(data=airbnb_con_comunas, size=0.75, alpha=.3) En el mapa se ve que ya no aparecen los límites de las comunas (se disolvieron) y quedó un solo polígono con la forma total de la Ciudad. Falta Continuar 2.4 Intersecciones Hacer una intersección entre capas significa que dos geometrías serán recortadas, generando una capa única que contenga solo las entidades que se encuentran superpuestas. Para esto podemos utilizar st_intersection. Veamos un ejemplo. ¿Cómo podríamos, a partir de un geoproceso, filtrar y quedarnos solo las observaciones pertenecientes a CABA, eliminando las de AMBA? Podríamos hacer una intersección espacial entre los datos de Airbnb y el shape del contorno de CABA que unimos anteriormente de la siguiente forma: airbnb_con_comunas &lt;- airbnb_con_comunas %&gt;% st_intersection(caba) Grafiquemos el resultado en su contexto: ggplot()+ geom_sf(data=comunas) + geom_sf(data=airbnb_con_comunas, size=0.75, alpha = .3, color=&quot;dodgerblue3&quot;) Listo, ya tenemos nuestro shape de Airbnb recortado a partir de una intersección espacial. Ahora miremos otros ejemplos de uso de esta herramienta. Ahora nos quedaremos solo con las observaciones pertenecientes a las Comunas con mayor cantidad de publicaciones a partir de una intersección espacial entre los datos de Airbnb y las Comunas que tienen una cantidad de datos mayor a la media: airbnb_con_comunas %&gt;% st_intersection(comunas %&gt;% filter(cantidad&gt;mean(cantidad))) %&gt;% ggplot() + geom_sf(data=comunas) + geom_sf(aes(color=comunas), size=0.4, alpha=0.3) Lo primero que hicimos fue filtrar las comunas que en la columna cantidad tienen un valor mayor al promedio de las 15 comunas, y luego intersectamos estas Comunas con los datos de Airbnb, para quedarnos solo con los pertenecientes a estas. Falta Completar 2.5 Distancias El cálculo de distancias con st_distance es otro de los geoprocesos que vamos a aprender. Esta herramienta es muy útil para realizar análisis espaciales ya que nos permite comprender como se organizan y relacionan entre sí las entidades geográficas. Es decir que, nos permite sumar información a nuestros datos a partir de la relación especial que tienen con otro objeto. Como los datos que estamos analizando pertenecen a la oferta de alquileres turísticos, calculemos la distancia entre cada una de las propiedades publicadas y los hoteles de la Ciudad, para entender si tienen patrones/comportamientos similares o no. Esto es posible armando una función que nos permita calcular y filtrar la distancia de cada una de las propiedades publicadas en Airbnb al hotel más cercano. Con este análisis intentaremos comprender como es la distribución de la oferta de Airbnb y si tiene alguna relación con la ubicación de los hoteles en la ciudad. Primero cargamos el dataset de hoteles que está publicado en le portal de datos abiertos de GCBA: hoteles &lt;- read.csv(&quot;http://cdn.buenosaires.gob.ar/datosabiertos/datasets/alojamientos-turisticos/alojamientos-turisticos.csv&quot;, encoding = &quot;UTF-8&quot;) Y lo convertimos a shape como ya aprendimos: hoteles &lt;- hoteles %&gt;% filter(!is.na(lat), !is.na(long)) %&gt;% st_as_sf(coords = c(&quot;long&quot;, &quot;lat&quot;), crs = 4326) Luego creamos una nueva columna en nuestro dataset donde calculamos la distancia de cada propiedad a cada hotel, pero nos quedamos únicamente con la distancia a la estación más cercana. airbnb_con_comunas &lt;- airbnb_con_comunas %&gt;% mutate(dist_hotel = apply(st_distance(airbnb_con_comunas, hoteles), 1, function(x) min(x))) Revisemos como se ve la nueva columna: airbnb_con_comunas %&gt;% select(room_type, name, dist_hotel) %&gt;% head() ## Simple feature collection with 6 features and 3 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -58.41829 ymin: -34.62068 xmax: -58.37914 ymax: -34.59101 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## room_type name dist_hotel ## 1 Private room Habitacion privada en Recoleta 142.02029 ## 2 Private room Palermo Cozy room wprivate bathroom 162.42654 ## 3 Private room Habitacion Recoleta, Confort 116.76407 ## 4 Private room The Flan Room- Palacio Nr San Telmo 38.54021 ## 5 Private room &quot;Antique&quot; room @ El Centro 90.17597 ## 6 Private room Private room - Congreso 203.75457 ## geometry ## 1 POINT (-58.39364 -34.59101) ## 2 POINT (-58.41829 -34.59616) ## 3 POINT (-58.39617 -34.59786) ## 4 POINT (-58.38353 -34.62068) ## 5 POINT (-58.37914 -34.60041) ## 6 POINT (-58.39456 -34.61322) Veamos y analicemos el resumen del resultado obtenido: summary(airbnb_con_comunas$dist_hotel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.408 91.583 169.227 260.199 318.691 4828.336 Acá podemos ver que la mínima distancia entre una propiedad publicada en Airbnb y un hotel es de 1,4 metros y que la máxima es de 4828. Sin embargo, si miramos la media podemos ver que las propiedades se encuentran, en promedio, a 260 metros del hotel más cercano, lo cuál es muy cerca. A priori con estos datos, parecería ser que la localización de los Airbnb está muy relacionada con la de los hoteles. Visualicemos esto en un histograma para comprender mejor la distribución de los datos: ggplot(airbnb_con_comunas) + geom_histogram(aes(x = dist_hotel)) Se ve como la mayor parte de las observaciones se encuentra a menos de 250 metros de algun hotel. Por último, veamos esto en un mapa: airbnb_con_comunas %&gt;% ggplot() + geom_sf(data=comunas)+ geom_sf(aes(color=dist_hotel)) + geom_sf(data=hoteles) + scale_color_viridis_c(option = &quot;plasma&quot;, direction = -1) En el mapa se ve claramente que la distribución de la oferta de propiedades no es aleatoria, sino que responde a la demanda de los turistas ya que la mayor parte está ubicada cerca de hoteles (puntos negros). Los patrones de los 2 dataset son muy similares: gran concentración de puntos en Recoleta, Retiro y Microcento, extendiéndose hacia el corredor norte y siendo casi nula hacia el sur de la Ciudad. 2.6 Cálculo de extensión (longitud, área) barrios &lt;- st_read(&quot;http://cdn.buenosaires.gob.ar/datosabiertos/datasets/barrios/barrios.geojson&quot;) ## Reading layer `barrios_badata&#39; from data source `http://cdn.buenosaires.gob.ar/datosabiertos/datasets/barrios/barrios.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 48 features and 4 fields ## geometry type: POLYGON ## dimension: XY ## bbox: xmin: -58.53152 ymin: -34.70529 xmax: -58.33515 ymax: -34.52649 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs "],
["acceso-a-información-urbana-georeferenciada-en-repositorios-online.html", "Capítulo 3 Acceso a información urbana georeferenciada en repositorios online 3.1 OpenStreetMap desde R 3.2 Un ejercicio más: ¡Bares en el barrio!", " Capítulo 3 Acceso a información urbana georeferenciada en repositorios online OpenStreetMap es un servicio de mapas online que publica información contribuida en forma libre por más de un millón de voluntarios, que benefician a los 5,5 millones de usuarios de la plataforma. Los contribuidores más entusiastas mapean barrios completos utilizando herramientas GPS para enviar información local completa, actualizada y precisa a OpenStreetMap. Varias empresas y entidades públicas que producen información geográfica también contribuyen al permitir que sus datos sean incluidos. Existen equipos profesionales de contribuidores que que se coordinan para agregar y mantener actualizada información georeferenciada de límites políticos, calles, edificios, negocios y otros puntos de interés; en ocasiones empleados por compañías que dependen de OpenStreetMap para el “mapa base” de sus productos, como mapbox.com y carto.com. Toda la información disponible en OpenStreetMap puede ser descargada y reutilizada por cualquier persona, ya sea accediendo al mapa online, obteniendo una copia completa de la base de datos, o accediendo a los datos vía API. 3.1 OpenStreetMap desde R Utilizaremos osmdata, un paquete de R que permite acceder a los datos de OpenStreetMap (OSM de aquí en más) con sus atributos, geometría y posición. Como siempre, si no tenemos aún el paquete lo instalamos: install.packages(&quot;osmdata&quot;) También vamos a hacer uso del paquete leaflet, que nos va a permitir generar de forma muy rápida mapas interactivos. install.packages(&quot;osmdata&quot;) Y los activamos junto a otros paquetes que vamos a utilizar: library(osmdata) library(leaflet) library(tidyverse) # nuestra navaja suiza para manipulación y visualización de datos library(sf) # para procesar info espacial 3.1.1 Definiendo el lugar Antes de descargar información, definimos el lugar que queremos consultar. Éste puede ser un barrio, un municipio, un país, un continente… en éste caso, lo intentaremos con la ciudad de Rosario. Las funciones de osmdata nos permiten realizar consultas a Overpass (http://overpass-api.de/), una interfaz que permite extraer información de la base de datos global de OpenStreetMap. Overpass requiere que se especifique una “bounding box”, es decir las coordenadas de un rectángulo que abarque la zona de interés. Podemos obtener la bounding box de cualquier lugar con la función getbb(): bbox &lt;- getbb(&quot;Rosario, Santa Fe&quot;) bbox ## min max ## x -60.78326 -60.61167 ## y -33.03487 -32.86965 Con getbb() también podemos obtener un polígono con los límites políticos, las fronteras exactas, de un lugar. Esto es muy útil para realizar mapas, o para filtrar la información que obtendremos luego para quedarnos sólo con la que corresponda a nuestra ciudad de interés, descartando la de áreas aledañas: bbox_poly &lt;- getbb(&quot;Municipio de Rosario, Santa Fe&quot;, format_out = &quot;sf_polygon&quot;) Para asegurarnos de que tenemos el lugar que queremos, y no otro de nombre similar en alguna otra parte del mundo, lo verificamos en un mapa rápido provisto vía leaflet: leaflet(bbox_poly) %&gt;% addTiles() %&gt;% addPolygons() Luce bien, así que continuamos. 3.1.2 Extrayendo información de OpenStreetMap El siguiente paso es utilizar la función add_osm_feature() para especificar los datos que queremos descargar. Esto requiere conocer las palabras clave con las que se identifican los registras en la base de OSM, que permiten indicar con gran detalle el tipo de datos georeferenciados que queremos: ya sean áreas de parques públicos, posición de oficinas de correo o cajeros automáticos, vías de ferrocarril… u otro, en un larguísimo etcétera que se puede consultar en https://wiki.openstreetmap.org/wiki/Map_Features En este caso vamos a solicitar todas las vías de circulación (calles, avenidas, autopistas, etc) de la ciudad. En la base de datos de OSM todas aparecen con la clave “highway”. rosario &lt;- opq(bbox) %&gt;% add_osm_feature(key = &quot;highway&quot;) Observemos que lo único que hemos obtenido hasta ahora es la definición de una consulta (qué y en dónde), pero aun no descargamos ningún dato: rosario ## $bbox ## [1] &quot;-33.0348662,-60.7832623,-32.8696532,-60.6116695&quot; ## ## $prefix ## [1] &quot;[out:xml][timeout:25];\\n(\\n&quot; ## ## $suffix ## [1] &quot;);\\n(._;&gt;;);\\nout body;&quot; ## ## $features ## [1] &quot; [\\&quot;highway\\&quot;]&quot; ## ## attr(,&quot;class&quot;) ## [1] &quot;list&quot; &quot;overpass_query&quot; Es sólo la definición de una consulta a la base de datos de OpenStreetMap: “Todas las calles (objetos con clave”highway“) dentro de éste rectángulo (que sabemos, corresponde a Rosario)”. Para hacer efectiva la consulta y descargar los datos, la pasamos por la función osmdata_sf() que recolecta lo que buscamos y lo entrega en forma de dataset espacial: rosario &lt;- rosario %&gt;% osmdata_sf() La descarga de información para una ciudad grande puede tomar varios minutos, y más aún la de un área metropolitana (o país, o continente, etc) así que es normal esperar un poco en ésta parte. En cuanto se completa, ya tenemos calles: rosario La consulta devolvió toda la información de puntos, líneas y polígonos disponibles en la base de OSM. A nos otros nos interesan las líneas, “osm_lines”, que demarcan la traza de las calles. Los registros con otras geometrías, como polígonos, pueden representar elementos asociados a las calles como bulevares o áreas de vereda que no vamos a usar por el momento. Del conjunto de datos disponibles, extraemos el dataframe con líneas, y chequeamos los atributos disponibles. Todos han sido recopilados por la comunidad de OpenStreetMap. calles &lt;- rosario$osm_lines # mostramos sólo las primeras 10 columnas... porque tiene montones! head(calles[1:10,]) ## Simple feature collection with 6 features and 282 fields ## geometry type: LINESTRING ## dimension: XY ## bbox: xmin: -60.71891 ymin: -33.01829 xmax: -60.65706 ymax: -32.86627 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## osm_id name abandoned.highway ## 10585611 10585611 Autopista Juan José Valle &lt;NA&gt; ## 23633084 23633084 Avenida de Circunvalación 25 de Mayo &lt;NA&gt; ## 23633086 23633086 Puente Nuestra Señora del Rosario &lt;NA&gt; ## 23633100 23633100 Avenida de Circunvalación 25 de Mayo &lt;NA&gt; ## 23633101 23633101 Avenida de Circunvalación 25 de Mayo &lt;NA&gt; ## 23644546 23644546 Avenida de Circunvalación 25 de Mayo &lt;NA&gt; ## abandoned.railway.left abandoned.surface abutters access access.lanes ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## addr.city addr.housenumber addr.postcode addr.street agricultural ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## alt_name amenity arcade.left arcade.right area ## 10585611 Ruta Nacional 9 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 Doctor Constantino Razzetti &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 Doctor Constantino Razzetti &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 Doctor Constantino Razzetti &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 Doctor Constantino Razzetti &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## barrier bench bicycle bicycle.lanes bicycle.oneway bicycle_road bin ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## bridge bridge.name bridge.structure bridge.support building bus ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 cantilever &lt;NA&gt; beam pylon &lt;NA&gt; &lt;NA&gt; ## 23633100 yes &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 viaduct &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## bus.lanes bus_bay busway.left busway.right change.backward ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## change.forward change.lanes change.lanes.backward change.lanes.forward ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## check_date construction construction.highway construction.lanes ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## construction.maxspeed construction.name construction.oneway ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## construction.surface contact.website conveying covered crossing ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## crossing_ref cutting cycleway cycleway.left cycleway.left.oneway ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## cycleway.left.surface cycleway.right description description.cycleway ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## designation destination destination.backward destination.forward ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; Victoria RN174 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## destination.lanes destination.ref destination.ref.forward ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 Victoria|Victoria|Rosario &lt;NA&gt; &lt;NA&gt; ## 23633101 Victoria|Victoria|Rosario &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## destination.ref.lanes destination.street ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 RN174|RN174|RN11 &lt;NA&gt; ## 23633101 RN174|RN174|RN11 &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## destination.street.lanes ## 10585611 &lt;NA&gt; ## 23633084 &lt;NA&gt; ## 23633086 &lt;NA&gt; ## 23633100 &lt;NA&gt; ## 23633101 Puente Rosario - Victoria|Puente Rosario - Victoria|Bulevar General José Rondeau ## 23644546 &lt;NA&gt; ## destination.symbol destination.symbol.forward destination.symbol.lanes ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; bridge|bridge|centre ## 23633101 &lt;NA&gt; &lt;NA&gt; bridge|bridge|centre ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## destination.to distance disused disused.highway disused.maxspeed ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## disused.turn.lanes.backward drinking_water embankment embedded_rails ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## emergency emergency.lanes fence_type fixme flood_prone floor.material ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## foot foot.lanes footway golf golf_cart goods handrail handrail.center ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## handrail.left handrail.right hazard height hgv highway historic ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; motorway &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; motorway &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; motorway &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; motorway &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; motorway &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; motorway &lt;NA&gt; ## horse hov incline indoor indoor.highway int_name internet_access ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## internet_access.fee internet_access.operator junction kerb landcover ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## landuse lanes lanes.backward lanes.bicycle lanes.bus lanes.forward ## 10585611 &lt;NA&gt; 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## lanes.psv lanes.psv.conditional layer leisure level lit lit.type ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; 1 &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; 1 &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## loc_ref man_made material maxheight maxheight.physical maxspeed ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 4.5 &lt;NA&gt; 120 ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 100 ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 80 ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 100 ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 100 ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 100 ## maxspeed.bus maxspeed.hgv maxspeed.lanes maxspeed.type memorial ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 90 80 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; 60 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 90 80 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 90 80 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 90 80 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## minspeed mooring motor_vehicle motor_vehicle.conditional ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 60 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 55 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 60 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 60 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 60 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## motor_vehicle.lanes motorcar motorcycle motorroad mtb.scale ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## mtb.scale.uphill name.bridge name.etymology.wikidata natural network ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## noname note obstacle.wheelchair ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## official_name ## 10585611 Autopista Teniente General Juan José Valle ## 23633084 &lt;NA&gt; ## 23633086 &lt;NA&gt; ## 23633100 &lt;NA&gt; ## 23633101 &lt;NA&gt; ## 23644546 &lt;NA&gt; ## old_name old_ref oneway ## 10585611 Autopista Teniente General Pedro Aramburu &lt;NA&gt; yes ## 23633084 &lt;NA&gt; &lt;NA&gt; yes ## 23633086 &lt;NA&gt; &lt;NA&gt; yes ## 23633100 &lt;NA&gt; &lt;NA&gt; yes ## 23633101 &lt;NA&gt; &lt;NA&gt; yes ## 23644546 &lt;NA&gt; &lt;NA&gt; yes ## oneway.bicycle opening_hours operator overtaking park_ride parking ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; forward &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; no &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; forward &lt;NA&gt; &lt;NA&gt; ## parking.condition.both parking.condition.both.maxstay ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## parking.condition.both.residents parking.condition.both.time_interval ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## parking.condition.left parking.condition.left.maxstay ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## parking.condition.left.vehicles parking.condition.right ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## parking.condition.right.maxstay parking.condition.right.time_interval ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## parking.condition.right.vehicles parking.lane.both parking.lane.left ## 10585611 &lt;NA&gt; &lt;NA&gt; no_stopping ## 23633084 &lt;NA&gt; &lt;NA&gt; no_stopping ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; no_stopping &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; no_stopping ## 23644546 &lt;NA&gt; &lt;NA&gt; no_stopping ## parking.lane.left.both parking.lane.left.parallel parking.lane.right ## 10585611 &lt;NA&gt; &lt;NA&gt; no_parking ## 23633084 &lt;NA&gt; &lt;NA&gt; no_parking ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; no_parking ## 23644546 &lt;NA&gt; &lt;NA&gt; no_parking ## parking.lane.right.diagonal parking.lanes.left parking.lanes.right ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## passenger_information_display picnic_table placement ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## placement.backward placement.forward proposed proposed.highway ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## proposed.lanes proposed.maxspeed proposed.name proposed.oneway ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## proposed.surface psv psv.lanes public_transport ramp ramp.bicycle ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## ramp.luggage ramp.stroller ramp.wheelchair ref reg_name ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; RN9 &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; RNA008 &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; RN174 &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; RNA008 &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; RNA008 &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; RNA008 &lt;NA&gt; ## seamark.bridge.category segregated service share_taxi shelter ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 suspension &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## short_name shoulder shoulder.access.bicycle shoulder.line ## 10585611 Juan José Valle &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 Avenida Circunvalación &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 Avenida Circunvalación &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 Avenida Circunvalación &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 Avenida Circunvalación &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## shoulder.right shoulder.right.surface shoulder.surface sidewalk ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## sidewalk.both.surface sidewalk.oneway sidewalk.right ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## sidewalk.right.surface smoothness sorting_name source source.bridge ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## source.hgv source.highway source.imagery source.lanes source.maxheight ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## source.maxspeed source.minspeed source.motor_vehicle.conditional ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 sign sign &lt;NA&gt; ## 23633086 &lt;NA&gt; sign;Mapillary &lt;NA&gt; ## 23633100 sign sign &lt;NA&gt; ## 23633101 sign sign &lt;NA&gt; ## 23644546 sign sign &lt;NA&gt; ## source.name ## 10585611 http://infoleg.mecon.gov.ar/infolegInternet/anexos/225000-229999/225220/norma.htm ## 23633084 &lt;NA&gt; ## 23633086 &lt;NA&gt; ## 23633100 &lt;NA&gt; ## 23633101 &lt;NA&gt; ## 23644546 &lt;NA&gt; ## source.oneway source.parking.lane.both source.parking.lanes.both ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## source.proposed source.proposed.lanes ## 10585611 &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## source.ref source.surface ## 10585611 http://forum.openstreetmap.org/viewtopic.php?id=31749 &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; ## sport step_count supervised surface surface.bicycle surface.lanes ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; asphalt &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; asphalt &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; asphalt &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; asphalt &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; asphalt &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; asphalt &lt;NA&gt; &lt;NA&gt; ## surface.lanes.backward surface.lanes.forward surveillance ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## surveillance.type tactile_paving taxi taxi.lanes toilets toll tourism ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; yes &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## tourist_bus tracktype traffic traffic_calming train trolley_wire ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## trolleybus tunnel turn turn.lanes ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; through|through|slight_right ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; through|through|slight_right ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## turn.lanes.backward turn.lanes.forward vehicle vehicle.conditional ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## water wheelchair wheelchair.description width wikidata ## 10585611 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633084 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633086 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633100 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23633101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 23644546 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## wikimedia_commons wikipedia geometry ## 10585611 &lt;NA&gt; &lt;NA&gt; LINESTRING (-60.66396 -33.0... ## 23633084 &lt;NA&gt; &lt;NA&gt; LINESTRING (-60.71845 -32.8... ## 23633086 &lt;NA&gt; &lt;NA&gt; LINESTRING (-60.68246 -32.8... ## 23633100 &lt;NA&gt; &lt;NA&gt; LINESTRING (-60.70536 -32.8... ## 23633101 &lt;NA&gt; &lt;NA&gt; LINESTRING (-60.7047 -32.87... ## 23644546 &lt;NA&gt; &lt;NA&gt; LINESTRING (-60.71891 -32.8... 3.1.3 Visualizando los resultados Dado que las calles han sido descargadas en formato sf, podemos visualizarlas con ggplot: y geom_sf: ggplot() + geom_sf(data = calles) Las calles exceden los límites de Rosario, ya que tenemos todos los datos encontrados dentro del rectángulo de la bounding box. Para “recortar” los datos conservando solo las calles de la ciudad, podemos extraer su intersección con el polígono de límites que obtuvimos antes. calles &lt;- st_intersection(calles, bbox_poly) Ahora si! ggplot() + geom_sf(data = calles) Podemos visualizar atributos de las calles, por ejemplo el de la velocidad máxima permitida, que está presente para casi todas. Pero antes va a ser necesario limpiar un poco los datos… como es usual. Los dataframes en formato sf que crea osmdata tienen todos los valores en formato texto, incluso aquellos que son números como maxspeed (la velocidad máxima), o lanes, la cantidad de carriles. Lo arreglamos: calles &lt;- calles %&gt;% mutate(maxspeed = as.numeric(maxspeed), lanes = ifelse(is.na(lanes), 1, as.numeric(lanes))) Con eso tenemos limpias las variables de velocidad máxima y ancho en carriles. Listos para visualizar. ggplot(calles) + geom_sf(aes(color = maxspeed), alpha = 0.5) + scale_color_viridis_c() + theme_void() + labs(title = &quot;Rosario&quot;, subtitle = &quot;Vías de circulación&quot;, caption = &quot;fuente: OpenStreetMap&quot;, color = &quot;velocidad máxima&quot;) O podemos revisar la posición de las avenidas: ggplot() + geom_sf(data = calles, color = &quot;gray40&quot;, alpha = .5) + geom_sf(data = filter(calles, str_detect(name, &quot;Avenida&quot;)), color = &quot;salmon&quot;) + theme_void() + labs(title = &quot;Rosario&quot;, subtitle = &quot;Avenidas&quot;, caption = &quot;fuente: OpenStreetMap&quot;) 3.2 Un ejercicio más: ¡Bares en el barrio! Imaginemos que estamos interesados en identificar y caracterizas los bares presentes en un barrio determinado, como San Telmo en la Ciudad de Buenos Aires. Como punto de partida, podemos consultar la base de OSM a ver que encontramos. Comenzamos por definir nuestra área de interés bbox_st &lt;- getbb(&#39;San Telmo, Ciudad Autonoma de Buenos Aires&#39;) bbox_st_poly = getbb(&#39;San Telmo, Ciudad Autonoma de Buenos Aires&#39;, format_out = &quot;sf_polygon&quot;) leaflet(bbox_st_poly) %&gt;% addTiles() %&gt;% addPolygons() Habiendo verificado que tenemos el área correcta, armamos una consulta por la grilla de calles, y la ejecutamos. SanTelmo_calles &lt;- opq(bbox_st) %&gt;% add_osm_feature(key = &quot;highway&quot;) %&gt;% osmdata_sf() Y también descargamos información sobre la posición de bares. Habiendo revisado https://wiki.openstreetmap.org/wiki/Map_Features, sabemos que para obtener bares necesitamos la categoría “amenity”, y el subtipo “bar”. En términos de OSM, key = &quot;amenity&quot;, value = &quot;bar&quot;: SanTelmo_bares &lt;- opq(bbox_st) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;bar&quot;) %&gt;% osmdata_sf() Extraemos la información dentro de los límites exactos del barrio. A diferencia de las calles, que aparecen en la geometría de líneas, para los bares nos interesan los puntos. SanTelmo_calles &lt;- st_intersection(SanTelmo_calles$osm_lines, bbox_st_poly) SanTelmo_bares &lt;- st_intersection(SanTelmo_bares$osm_points, bbox_st_poly) Y listos para mapear! De paso, resaltamos aquellos donde se baila tango, al colorear según el atributo “dance.style”, incluido en los datos. ggplot() + geom_sf(data = SanTelmo_calles, color = &quot;darkslateblue&quot;) + geom_sf(data = SanTelmo_bares, aes(color = dance.style)) + geom_sf_label(data = SanTelmo_bares, aes(label = name), size = 2) + theme_void() + labs(title = &quot;San Telmo&quot;, subtitle = &quot;Bares&quot;, caption = &quot;fuente: OpenStreetMap&quot;, color = &quot;Ofrecen baile&quot;) Casi listo. Antes de darnos por satisfechos, tenemos que mejorar la ubicación de las etiquetas, que se superponen por la proximidad de los lugares. Por el momento geom_sf_label() -la geometría de ggplot que permite graficar etiquetas de datos sf- no incluye la útil opción de correr la posición de las etiquetas en forma automática para que no se solapen. Por suerte, existe un pequeño paquete, ggsflabel, que provee la funcionalidad que necesitamos. Podemos instalar el paquete directo desde el repositorio de su autor: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;yutannihilation/ggsflabel&quot;) library(ggsflabel) Y ahora, usamos geom_sf_label_repel() para la versión final de nuestro mapa de bares en San Telmo: ggplot() + geom_sf(data = SanTelmo_calles, color = &quot;darkslateblue&quot;) + geom_sf(data = SanTelmo_bares, aes(color = dance.style)) + geom_sf_label_repel(data = SanTelmo_bares, aes(label = name), size = 2) + theme_void() + labs(title = &quot;San Telmo&quot;, subtitle = &quot;Bares&quot;, caption = &quot;fuente: OpenStreetMap&quot;, color = &quot;Ofrecen baile&quot;) "],
["obteniendo-y-analizando-datos-de-redes-sociales.html", "Capítulo 4 Obteniendo y analizando datos de redes sociales 4.1 Investigando con social media 4.2 Conectando R a Twitter 4.3 Escuchando tweets en tiempo real 4.4 Capturando tweets por períodos prolongados 4.5 Capturando tweets en zonas específicas 4.6 Visualizando los datos georeferenciados", " Capítulo 4 Obteniendo y analizando datos de redes sociales 4.1 Investigando con social media Los contenidos generados en las redes sociales son producidos y recopilados por por usuarios individuales (o representeantes de organizaciones) que participan en plataformas de acceso público tales como Twitter, Facebook, o Instagram. Si bien esas tres son las más populares, existen muchísimas otras plataformas funcionan como repositorios de información online como Yelp (reseñas de restoranes) o Properati (listados de propiedades en venta y alquiler), entre tantos otros. La información producida en redes sociales llama la atención de investigadores en temas sociales por el nivel de detalle que encierra. Los usuarios registran y transmiten en forma pública un amplio abanico de datos personales: su paradero, estado de ánimo, intenciones futuras, etc. Es por eso que la “minería” de datos capturados online se utiliza para estudiar procesos sociales, políticos, y hasta meteorológicos ( monitoreando menciones a eventos climáticos). 4.1.1 Los desafíos de trabajar con información de repositorios sociales Por supuesto, no todo son ventajas. El análsis de datos extraidos de redes sociales se enfrenta a varios obstáculos, entre ellos: “Suciedad” de los datos. Los contenidos publicados en redes sociales suelen combinar texto, imágenes y video, lo cual requiere un esfuerzo considerable para identificar y clasificar los tipos de contenido disponibles. Incluso el contenido más fácil de tratar, el texto, requiere de limpieza previa: hay que lidiar con abreviaciones, emojis, puntuación inusual, etc. Inconsistencia. Los regisros capturados desde repositorios online suelen ser inconsistentes: Muchas veces, uno o más de los valores de sus atributos (tales como “usario”, “mensaje”, “idioma”, etc) faltan en muchos de los registros. Por ejemplo, algunos contienen coordenadas espaciales que permiten ubicarlos en el espacio, pero en muchos casos no están georreferenciados. Eso dificulta saber dónde está siendo producida la información, desde donde se emite. Sesgo y veracidad dudosa. Al analizar los datos, es tentador realizar inferencias acerca de lo que la población en general hace o quiere. Pero hay que tener en cuenta que las personas que producen contenidos online son un grupo particular, que tiende a ser más joven y de nivel socioeconómico mayor a la media. Por otra parte, que algo se haya dicho online dista mucho de ser cierto o sincero. Ni siquiera podemos asumir que los usuarios son individuos humanos; las redes sociales son utilizadas en creciente medida por “bots”, software automático que publica contenidos en gran volumen simulando ser una persona, o un grupo de personas, con el fin de manipular la opinión pública. Volumen. Cuando uno decide acumular los datos que obtiene de redes sociales, durante meses o años, el volumen alcanzado no es trivial. Resguardar, ordenar, clasificar y extraer sentido de decenas o centenas de millones de registros es un desafío de big data. Limitaciones de acceso: Las empresas que controlan los repositorios de datos producidos en redes sociales vigilan con cuidado a quienes acceden, y limitan la cantidad de información que puede extraerse. En el caso de Twitter, las consultas permitidas a su base de datos se limitan al contenido producido en la última semana, y no entrega más de 18,000 tweets por consulta. 4.2 Conectando R a Twitter Para acceder a los sistemas de Twitter necesitamos obtener una autorización, identificándonos con nuestro usuario en la red. Este paso es inevitable, ya que sin una autorización Twitter no responderá nuestras consultas. Por suerte, el trámite para obtener acceso es inmediato, y como resultado obtendremos una serie de códigos de identificación, conocidos en su conjunto como API keys. 4.2.1 Obteniendo autorización El primer paso es, si no lo hemos hecho aún, crear un usuario de Twitter en https://twitter.com/signup. Luego seguimos los pasos de éste instructivo https://towardsdatascience.com/access-data-from-twitter-api-using-r-and-or-python-b8ac342d3efe. Nota: Twitter nos preguntará cómo se llama la “app” para la cual estamos solicitand acceso. No vamos a crear ninguna app, pero aún así tenemos que elegir un nombre; usemos “RTWEET” (aunque podría ser cualquier otro). Al completar los pasos estaremos en poder de cuatro códigos: Consumer Key, Consumer Secret, Access Token y Access Token Secret. Tomemos nota de ellos. 4.2.2 Acceso a Twitter via R: el paquete rtweet rtweet provee un conjunto de funciones que nos facilitan interactuar con Twitter. Si no lo tenemos instalado, lo conseguimos vía: install.packages(&quot;rtweet&quot;) Y lo activamos junto al resto de los paquetes que vamos a usar. library(rtweet) library(tidyverse) A continuación, le pasamos a rtweet los datos de autorización que conseguimos antes para crear un “token” (en la jerga de Twitter, es una especie de comprobante de que estamos autorizados a acceder a los datos) # El nombre que le asgnamos a la app en el formulario de autorización appname &lt;- &quot;RTWEET&quot; ## consumer key (en el ejemplo no es una clave real, usar la verdadera) consumer_key &lt;- &quot;la_secuencia_de_caracteres_de_nuestra_consumer_key&quot; ## consumer secret (en el ejemplo no es un clave real, usar la verdadera) consumer_secret &lt;- &quot;la_secuencia_de_caracteres_de_nuestra_consumer_secret&quot; ## consumer key (en el ejemplo no es una clave real, usar la verdadera) access_token &lt;- &quot;la_secuencia_de_caracteres_de_nuestro_access_token&quot; ## consumer secret (en el ejemplo no es un clave real, usar la verdadera) access_secret &lt;- &quot;la_secuencia_de_caracteres_de_nuestro_access_secret&quot; twitter_token &lt;- create_token( app = appname, consumer_key = consumer_key, consumer_secret = consumer_secret, access_token = access_token, access_secret = access_secret) Al ejecutar esas líneas se abrirá una ventana en nuestro navegador solicitando autorizar el acceso vía R -lo aceptamos, por supuesto. Ahora si, estamos listos para realizar consultas en el archivo de Twitter. La función search_tweets() permite obtener tweets que cumplan los requisitos que fijemos. Por ejemplo, para buscar tweets que contienen el término “inflacion”, usamos: tweets &lt;- search_tweets(q = &quot;inflacion&quot;, n = 3000) El parámetro n = 3000 es para limitar la búsqueda a los primeros 3000 tweets hallados. También puede hacerse una búsqueda por múltiples términos. Por ejemplo, buscando “ciudad+universitaria” hace que twitter devuelva resultados donde las palabras aparecen juntas y en ese orden; como alternativa, al optar por “ciudad universitaria” se obtienen tweets donde aparezcan esas palabras en cualquier parte del texto, sin importar su orden o si aparecen contiguas. El resultado es un dataframe de 3000 observaciones -el número máximo que habíamos solicitado- y 88 columnas. rtweet incluye users_data(), una función que muestra detalles de los usuarios que han producido los tweets que capturamos: users_data(tweets) %&gt;% head() ## # A tibble: 6 x 20 ## user_id screen_name name location description url protected followers_count ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;int&gt; ## 1 257472… pablosebas… Seba… Tucumán… Ingeniero … &lt;NA&gt; FALSE 279 ## 2 960382… PieNPi Pabl… Argenti… Underdog-R… &lt;NA&gt; FALSE 288 ## 3 106816… Abeldealme… Abel… El Bols… Profesor d… &lt;NA&gt; FALSE 1471 ## 4 442015… JulianColo… Juli… Mar Del… &quot;UNMDP Der… http… FALSE 1954 ## 5 837485… Yorsha7 Yors… Argenti… Morocha Ar… &lt;NA&gt; FALSE 331 ## 6 102506… Sofia99473… Sofia &quot;&quot; &quot;&quot; &lt;NA&gt; FALSE 3 ## # … with 12 more variables: friends_count &lt;int&gt;, listed_count &lt;int&gt;, ## # statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, account_created_at &lt;dttm&gt;, ## # verified &lt;lgl&gt;, profile_url &lt;chr&gt;, profile_expanded_url &lt;chr&gt;, ## # account_lang &lt;lgl&gt;, profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; También podemos explorar los resultados en base a las 88 variables disponibles. Revisemos los nombres: names(tweets) ## [1] &quot;user_id&quot; &quot;status_id&quot; ## [3] &quot;created_at&quot; &quot;screen_name&quot; ## [5] &quot;text&quot; &quot;source&quot; ## [7] &quot;display_text_width&quot; &quot;reply_to_status_id&quot; ## [9] &quot;reply_to_user_id&quot; &quot;reply_to_screen_name&quot; ## [11] &quot;is_quote&quot; &quot;is_retweet&quot; ## [13] &quot;favorite_count&quot; &quot;retweet_count&quot; ## [15] &quot;quote_count&quot; &quot;reply_count&quot; ## [17] &quot;hashtags&quot; &quot;symbols&quot; ## [19] &quot;urls_url&quot; &quot;urls_t.co&quot; ## [21] &quot;urls_expanded_url&quot; &quot;media_url&quot; ## [23] &quot;media_t.co&quot; &quot;media_expanded_url&quot; ## [25] &quot;media_type&quot; &quot;ext_media_url&quot; ## [27] &quot;ext_media_t.co&quot; &quot;ext_media_expanded_url&quot; ## [29] &quot;ext_media_type&quot; &quot;mentions_user_id&quot; ## [31] &quot;mentions_screen_name&quot; &quot;lang&quot; ## [33] &quot;quoted_status_id&quot; &quot;quoted_text&quot; ## [35] &quot;quoted_created_at&quot; &quot;quoted_source&quot; ## [37] &quot;quoted_favorite_count&quot; &quot;quoted_retweet_count&quot; ## [39] &quot;quoted_user_id&quot; &quot;quoted_screen_name&quot; ## [41] &quot;quoted_name&quot; &quot;quoted_followers_count&quot; ## [43] &quot;quoted_friends_count&quot; &quot;quoted_statuses_count&quot; ## [45] &quot;quoted_location&quot; &quot;quoted_description&quot; ## [47] &quot;quoted_verified&quot; &quot;retweet_status_id&quot; ## [49] &quot;retweet_text&quot; &quot;retweet_created_at&quot; ## [51] &quot;retweet_source&quot; &quot;retweet_favorite_count&quot; ## [53] &quot;retweet_retweet_count&quot; &quot;retweet_user_id&quot; ## [55] &quot;retweet_screen_name&quot; &quot;retweet_name&quot; ## [57] &quot;retweet_followers_count&quot; &quot;retweet_friends_count&quot; ## [59] &quot;retweet_statuses_count&quot; &quot;retweet_location&quot; ## [61] &quot;retweet_description&quot; &quot;retweet_verified&quot; ## [63] &quot;place_url&quot; &quot;place_name&quot; ## [65] &quot;place_full_name&quot; &quot;place_type&quot; ## [67] &quot;country&quot; &quot;country_code&quot; ## [69] &quot;geo_coords&quot; &quot;coords_coords&quot; ## [71] &quot;bbox_coords&quot; &quot;status_url&quot; ## [73] &quot;name&quot; &quot;location&quot; ## [75] &quot;description&quot; &quot;url&quot; ## [77] &quot;protected&quot; &quot;followers_count&quot; ## [79] &quot;friends_count&quot; &quot;listed_count&quot; ## [81] &quot;statuses_count&quot; &quot;favourites_count&quot; ## [83] &quot;account_created_at&quot; &quot;verified&quot; ## [85] &quot;profile_url&quot; &quot;profile_expanded_url&quot; ## [87] &quot;account_lang&quot; &quot;profile_banner_url&quot; ## [89] &quot;profile_background_url&quot; &quot;profile_image_url&quot; Allí hay de todo para explorar. 4.2.3 Usuarios más populares Según la cantidad de seguidores: options(scipen = 20) ggplot(tweets) + geom_histogram(aes(x = followers_count)) El gráfico muestra una distribución de “power law”, típica en los rankings de popularidad. Hay una enorme masa de usuarios con popularidad mínima (apenas un puñado de seguidores) y un número muy pequeño de usuarios que alcanza una cantidad deseguidores cientos o miles de veces superior a la de la mayoría. Obtenemos un top 5 de los usuarios más populares (con más seguidores), su procedencia, y el contenido del tweet: tweets %&gt;% top_n(5, followers_count) %&gt;% arrange(desc(followers_count)) %&gt;% select(screen_name, followers_count, location, text) ## # A tibble: 6 x 4 ## screen_name followers_count location text ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 la_patilla 7092240 Venezuela ALnavío: Así es el fracaso de Nic… ## 2 la_patilla 7092240 Venezuela ALnavío: Así es el fracaso de Nic… ## 3 la_patilla 7092240 Venezuela ALnavío: Así es el fracaso de Nic… ## 4 la_patilla 7092240 Venezuela ALnavío: Así es el fracaso de Nic… ## 5 clarincom 2959475 Buenos Aires, … Los ferroviarios cerraron la pari… ## 6 clarincom 2959475 Buenos Aires, … El ABL porteño aumentará mensualm… 4.2.4 Tweets más populares En base a la cantidad de retweets que recibieron. Nos quedamos sólo con los tweets originales, descartando los que son retweets en si mismos (“is_retweet == TRUE”), y revisamos la distribución de sus retweets: ggplot(filter(tweets, !is_retweet))+ geom_histogram(aes(x = retweet_count)) Otra ditribución power law. Identifiquemos el tweet original más que sumó más retweets: tweets %&gt;% filter(!is_retweet) %&gt;% filter(retweet_count == max(retweet_count)) %&gt;% select(screen_name, retweet_count, followers_count, location, text) ## # A tibble: 1 x 5 ## screen_name retweet_count followers_count location text ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 beltrandelr… 80 517300 &quot;México… Y los que no crean que lo… Nota: Si no estamos interesados en capturar retweets, podemos evitarlos al momento de consultar la base de Twitter, as’i tweets &lt;- search_tweets(q = &quot;inflacion&quot;, n = 500, include_rts = FALSE) 4.2.5 La hora del día a la que se producen los tweets rtweet() provee una funció que hace facil mostrar la evolución temporal de nuestros tweets: ts_plot(). Podemos ver la frecuencia de tweets por segundo, hora, día, semana, mes o año eligiendo el parámetro correspondiente (“secondss”, “minutess”, “hours”, “days”, “weeks”, “months”, o “years”) ts_plot(tweets, &quot;minutes&quot;) 4.2.6 Procedencia de los usuarios tweets %&gt;% ggplot() + geom_bar(aes(location)) + coord_flip() + labs(title = &quot;Procedencia de los usuarios&quot;, x = &quot;cantidad&quot;, y = &quot;ubicación&quot;) Dado que el campo “location” refleja el texto que cada usuario eligió para describir su ubicación (no se trata de las coordenadas de origen del tweet) las variabilidad es grande. Algunas escriben su país, otros su ciudad, otras su barrio… y hay quienes eligen opciones poéticas cómo “algún lugar del mundo”. En todo caso, la abundancia de opciones resulta en un gráfico muy difícil de leer. Probamos extraer el top 10 de lugares más frecuentes, eliminando los tweets de usuarios sin datos en su atributo “location”. tweets %&gt;% filter(location != &quot;&quot;, !is.na(location)) %&gt;% count(location) %&gt;% top_n(10, n) %&gt;% ggplot() + geom_col(aes(x = reorder(location, n), y = n)) + coord_flip() + labs(title = &quot;Procedencia de los usuarios&quot;, x = &quot;ubicación&quot;, y = &quot;cantidad&quot;) 4.3 Escuchando tweets en tiempo real Como alternativa a consultar el archivo “histórico” de Twitter, es posible conectar a su API de streaming, que entrega tweets en tiempo real al instante en que se producen. La función stream_tweets() permite iniciar una conección y capturar tweets hasta concluya el tiempo dispuesto por el parámetro “timeout”, expresado en segundos. Por ejemplo, para “escuchar” el stream de Twitter por un minuto (60 segundos), y capturar mensajes que incluyan los términos accidente y tránsito: captura_streaming &lt;- stream_tweets(q = &quot;accidente+tránsito&quot;, timeout = 60) Verificamos el resultado (sólo los campos de usuario y texto del tweet): captura_streaming[4:5] ## # A tibble: 3 x 2 ## screen_name text ## &lt;chr&gt; &lt;chr&gt; ## 1 stalinbriones Tremenda irresponsabilidad ## 2 3_xhamb3r buena farra!!! ## 3 talalata19 @sttmed @MovilidadEnv Por favor. Revisen accidente de tránsito … 4.4 Capturando tweets por períodos prolongados Cuando queremos monitorear un evento de actualidad, por ejemplo capturando tweets que mencionen una palabra o hashtag de interés, resulta necesario mantener las escucha activa durante varias horas o días. La solución para este caso es usar la función stream_tweets(), que permite iniciar un proceso de escucha de tiempo arbitrario. Dado que no se sabe que puede fallar en un proceso que dura varios días, la función se encarga de guardar los resultados en un archivo local a medida que se obtienen, y reiniciar la conexión a Twitter en forma automática si se interrumpe por algún motivo (como un corte momentáneo de acceso a internet). La usamos así: terminos_de_busqueda &lt;- &quot;accidente + tránsito&quot; # una semana: 60 segundos * 60 * 24 * 7 tiempo &lt;- 60 * 60 * 24 * 7 # El archivo donde guardar los resultados en disco (tendrá formato json, así que lo usamos en el nombre de archivo) archivo &lt;- &quot;busqueda_tweets.json&quot; stream_tweets(q = terminos_de_busqueda, timeout = tiempo, file_name = archivo, parse = FALSE) Una vez que el período de captura termina, podemos leer el archivo generado. # en el paso anterior definimos que el nombre de archivo es &quot;busqueda_tweets_DT_VP.json&quot; tweets &lt;- parse_stream(&quot;busqueda_tweets.json&quot;) Y con eso concluye el proceso. Ya estamos listos para analizar el contenido. 4.5 Capturando tweets en zonas específicas Imaginemos ahora que queremos obtener tweets originados en un lugar en particular. En un barrio, una ciudad, o un país. Para ello podemos aprovechar que Twitter permite realizar búsquedas por área geográfica. Por ejemeplo, iniciemos la descarga de tweets que mencionen el nombre que se le da en Buenos Aires al metro: “subte”. La clave está en que además de los términos de búsqueda vamos a especificar un radio de 20 millas (~32 km) en torno al área céntrica (el downtown) de la Ciudad: tweets_transporte &lt;- search_tweets(q = &quot;subte&quot;, geocode = &quot;-34.603722,-58.381592,20mi&quot;, include_rts = FALSE, n = 100000, retryonratelimit = TRUE) El proceso puede tomar un rato. Quien no pueda esperar, puede descargar unos resultados obtenidos previamente: tweets_transporte &lt;- readRDS(url(&quot;https://bitsandbricks.github.io/data/tweets_transporte.RDS&quot;)) 4.5.1 Extraer las coordenadas Algunos de los tweets, aquellos que fueron publicados desde un teléfono móvil u otro dispositivo con GPS, tienen coordenadas de posición precisas (latitud y longitud). El dataframe creado por rtweet guarda la pareja de coordenadas em el campo “coords_coords”, dentro de una lista. Es decir que en lugar de un valor simple, cada elemento de la columna contiene una lista de varios valores. De manera similar, también crea otras dos columnas, “geo_coords” y “bbox_coords” que contienen datos sobre la ubicación del tweet en forma de lista. Esto trae dos problemas: No podemos usar los verbos de manipulación de datos con esas columnas (filter, mutate, arrange, etc) porque están diseñados para trabajar con valores atómicos, como “hola” y no listas, como (“hola”, “chau”, “sin datos”). No podemos guardar el dataframe en formato .csv, el favorito de los que comparten datos, porque no hay forma estandarizada de indicar que algunos campos contienen una lista de datos en lugar de un valor único. write.csv y write_csv intentan guardar el dataframe en un archivo .csv, pero fallan al encontrar la primera columna que contiene listas. La solución es simple: usamos la función lat_lng(), que agrega al dataframe dos columnas adicionales llamadas “lat” y “lng”, conteniendo latitud y longitud para los tweets que traen posición exacta. tweets_transporte &lt;- lat_lng(tweets_transporte) Además, si quisiéramos guardar luego los datos en formato .csv, podemos descartar los campos problemáticos -los que contienen información geográfica en forma de listas-. La función select() nos permite retirarlos: tweets_transporte &lt;- tweets_transporte %&gt;% select(-geo_coords, -coords_coords, -bbox_coords) Para trabajar con los tweets georefernciados como un conjunto aparte, filtramos nuestra base para conservar sólo los mensajes que contienen coordenadas exactas de posición. tweets_transporte_geo &lt;- tweets_transporte %&gt;% filter(!is.na(lat), !is.na(lng)) El resultado evidencia que los tweets georeferenciados son sólo una fracción del total que se produce: nrow(tweets_transporte_geo) ## [1] 202 A continuación: ¡veamos los tweets en el mapa! 4.6 Visualizando los datos georeferenciados 4.6.1 Mapas estáticos con ggmap ggmap es un paquete de R que complementa a ggplot, agregando funciones que permiten adquirir y visualizar mapas en forma fácil. Si no lo tenemos instalado, ya sabemos que hacer: install.packages(&quot;ggmap&quot;) Lo activamos: library(ggmap) Ahora, para obtener un mapa base del área donde se encuentran los puntos que queremos mostrar, necesitamos determinar la “bounding box”: el rango de latitud y longitud que forma un rectángulo conteniendo todas las posiciones. En resumidas cuentas, se trata de los valores de latitud máxima y mínima, y de longitud máxima y mínima. Los proveedores de mapas online suelen solicitar los valores en este orden: izquierda, abajo, derecha, arriba. Es decir, posición mas al oeste, posición mas al sur, posición mas al este, posición mas al norte. Cuando disponemos de un dataframe con columnas de latitud y longitud, obtener la bounding box es bastante fácil: bbox &lt;- make_bbox(lon = tweets_transporte_geo$lng, lat = tweets_transporte_geo$lat) bbox ## left bottom right top ## -58.82968 -34.84405 -58.22878 -34.42486 Con eso podemos descargar un mapa del área. Como opción por defecto, ggmap solicita los mapas a Google Maps, pero ésta ha dejado de ser la alternativa ideal: desde octubre de 2018, Google exige a los usarios registrarse y proveer una tarjeta de crédito para descargar información mediante porgramas propios. Por eso vamos a usar otra de las fuentes habilitadas por ggmap, el servicio de mapas de Stamen Design. Lo descargamos entregando la bounding box del área que nos interesa y un nivel de zoom. El nivel de zoom -un número de 1 a 20- indica el detalle que tendrá el mapa descargado. Para un área metropolitana un zoom de entre 10 y 12 es adecuado. mimapa &lt;- get_stamenmap(bbox, zoom = 11) Para ver el resultado usamos ggmap(): ggmap(mimapa) Stamen ofrece varios estilos de mapa: “terrain” (usado por defecto), “terrain-background”, “terrain-labels”, “terrain-lines”, “toner”, “toner-2010”, “toner-2011”, “toner-background”, “toner-hybrid”, “toner-labels”, “toner-lines”, “toner-lite”, “watercolor”. Probemos algunos: mimapa_terrain_lines &lt;- get_stamenmap(bbox, maptype = &quot;terrain-lines&quot;, zoom = 11) mimapa_toner_lite &lt;- get_stamenmap(bbox, maptype = &quot;toner-lite&quot;, zoom = 11) mimapa_watercolor &lt;- get_stamenmap(bbox, maptype = &quot;watercolor&quot;, zoom = 11) ggmap(mimapa_terrain_lines) ggmap(mimapa_toner_lite) ggmap(mimapa_watercolor) Cuando descargamos un mapa que vamos a usar de base para visualizar datos, siempre es una buena idea elegir una opción en escala de grises, sin colores que compitan contra los datos que proyectaremos. Probamos entonces con “toner-lite” para el mapa que usaremos de aqui en adelante. mapa_BA &lt;- get_stamenmap(bbox, maptype = &quot;toner-lite&quot;, zoom = 11) ggmap(mapa_BA) Ahora agregamos capas de puntos mostrando la posición de los tweets. La sintaxis es la misma que aprendimos para ggplot; de hecho, ggmap es una llamada a ggplot que tras bambalinas se encarga de los ajustes necesarios para mostrar el mapa como findo. Habiendo revisado la data de Moreno, sabemos que las columnas de longitud y latitud de los puntos georeferenciados se llaman “lon” y “lat”. Al graficar los puntos, las usaremos como posición x e y respectivamente. ggmap(mapa_BA) + geom_point(data = tweets_transporte_geo, aes(x = lng, y = lat)) También podemos asignar a cada punto un color de acuerdo a la popularidad del usuario: ggmap(mapa_BA) + geom_point(data = tweets_transporte_geo, aes(x = lng, y = lat, color = followers_count)) + scale_color_distiller(palette = &quot;Spectral&quot;) ¿Qué pasó aquí? Tenemos un escala de colores que llega hasta 600.000, en el tono rojo, pero en el mapa solo vemos puntos azules, los que indican una cantidad baja de seguidores. La explicación está en la relativa rareza de usuarios de Twitter con cientos de miles de seguidores. Dado que la inmensa mayoría de usuarios de la red sólo tienen un puñado de seguidores, ocurre que puntitos que los representan suelen tapar a los esporádicos usuarios ultra populares. Si lo que queremos es mostrar los tweets de éstos últimos, podemos recurrir a un pequeño truco. Dado que las filas de un data rame se grafican en orden, si ordenamos las observaciones en orden creciente de “followers_count” los usuarios populares serán graficados al final, garantizando que su color aparezca por encima de otros. tweets_transporte_geo &lt;- arrange(tweets_transporte_geo, followers_count) ggmap(mapa_BA) + geom_point(data = tweets_transporte_geo, aes(x = lng, y = lat, color = followers_count)) + scale_color_distiller(palette = &quot;Spectral&quot;) Tambien podemos usemos usar el tamaño de cada punto para representar la repercusión de los tweets, en base a la cantidad de “retweets” que han obtenido: ggmap(mapa_BA) + geom_point(data = tweets_transporte_geo, aes(x = lng, y = lat, color = followers_count, size = retweet_count), alpha = .5) + scale_color_distiller(palette = &quot;Spectral&quot;) 4.6.2 Mapas interactivos con leaflet Con la explosión de de popularidad de los mapas online, con Google Maps al frente, se ha vuelto habitual explorar información geográfica en entornos interactivos, que permiten al usuario desplazarse libremente por la superficie terrestre y cambiar el nivel de zoom con el que se muestran los datos. Un mapa con información tan precisa como la posición de los tweets, que incluso permite ver a parcela desde donde se han emitido, se beneficia en extremo de la posibilidad de variar la escala de visualización a voluntad. Desde R es fácil proyectar nuestros datos sobre mapas interactivos, usando el paquete leaflet. Si aún no lo tenemos en nuestro sistema, lo obtenemos mediante: install.packages(&quot;leaflet&quot;) Una vez que está instalado, lo activamos library(leaflet) EL uso de leaflet es similar al de ggplot; uno toma un dataframe y lo muestra mediante capas que exponen distintos aspectos de la información. Para empezar, hacemos leaflet(tweets_transporte_geo) … y no obtuvimos mucho. Tal como pasa con ggplot(), si uno no define ninguna capa de visualización, el resultado es una especie de lienzo vacío. Siguiente paso: agregar un mapa base. Para sumar capas a un mapa de leaflet usamos &quot; %&gt;% &quot; en ugar del &quot; + &quot; que requiere ggplot(), pero el concepto es el mismo. leaflet(tweets_transporte_geo) %&gt;% addTiles() Ahora está un poco mejor, nos encontramos con un mapa, pero falta que aparezcan nustros datos. Es fácil: con addMarkers() leaflet se encarga de buscar las coordenadas de cada observación, y si aparecen con algún nombre esperable, las identifica y sitúa en el mapa un pin por cada una. Nombres esperables serían “latitude” y “longitude” o también, como en nuestro caso, “lat” y “lng”. Si las coordenadas aparecieran bajo columnas con nombres menos interpretables, se le puede aclarar a leaflet cuáles son vía paramétros. leaflet(tweets_transporte_geo) %&gt;% addTiles() %&gt;% addMarkers() Ya tenemos un mapa útil! Para mejorarlo, agregamos la opción de “popup”, que permite extraer información adicional cliqueando sobre un pin. Por ejemplo, el contenido del campo con el texto de cada tweet (nótese el uso de “~”, que leaflet requiere para entender que nos referimos a un campo presente en el dataframe que le pasamos). leaflet(tweets_transporte_geo) %&gt;% addTiles() %&gt;% addMarkers(popup = ~text) Para sumar una dimensión más a la visualización, podemos usar el color para indicar la cantidad de seguidores del autor de cada tweet. Para codificar por color, leaflet requiere definir una paleta de colores para aplicar a nuestros datos. Al crear una paleta debemos elegir la función correspondiente al tipo de datos que vamos a mostrar: colorFactor() para variables categóricas, colorNumeric() para variabes numéricas, o colorQuantile() también para variables numéricas, pero agrupadas en cuantiles. La función requere al menos dos parámetros. Uno es “palette”, para definir los tonos a usar. Aquí funcionan nuestros amigos viridis, magma, plasma e inferno, y también las paletas Brewer, como _“Spectral_ o Accent). El parametro restante es”domain&quot;, que simplemente toma un vector con los datos que vamos a representar con la paleta. Como la cantidad de seguidores es una variable numérica, podemos usar: paleta &lt;- colorNumeric( palette = &quot;viridis&quot;, domain = tweets_transporte_geo$followers_count) Y luego la usamos en nuestro mapa: leaflet(tweets_transporte_geo) %&gt;% addTiles() %&gt;% addCircleMarkers(popup = ~text, color = ~paleta(followers_count)) Como siempre es muy util agregar una leyenda que explique la codificación de los datos. leaflet sólo permite mostrar leyendas basadas en color (no en el diamétro de los círculos), pero algo es algo. Agregamos la leyenda así: leaflet(tweets_transporte_geo) %&gt;% addTiles() %&gt;% addCircleMarkers(radius = ~retweet_count, popup = ~text, color = ~paleta(followers_count)) %&gt;% addLegend(title = &quot;seguidores&quot;, pal = paleta, values = ~followers_count) Esto es sólo una introducción a la producción de mapas interactivos. Para acceder a un recorrido por muchas otras opciones disponibles con leaflet, podemos visitar https://rstudio.github.io/leaflet/ "],
["analizando-dinámicas-espacio-temporales.html", "Capítulo 5 Analizando dinámicas espacio-temporales 5.1 Mirando al espacio", " Capítulo 5 Analizando dinámicas espacio-temporales Para entender datasets con datos en gran volumen que poseen atributos de posición y tiempo, es útil visualizar el ritmo en el que ocurren (diario, mensual, anual, etc) y la forma en la que se disrtibuyen en el espacio. Para prácticar, trabajaremos con un dataset de delitos registrados en la Ciudad de Buenos Aires. Los datos fueron publicados por el Gobierno de la Ciudad como parte de http://mapa.seguridadciudad.gob.ar/, y recopilados en un repositorio descargable por (???) en https://github.com/ramadis/delitos-caba. delitos &lt;- read.csv(&quot;https://bitsandbricks.github.io/data/crimenydelito.csv&quot;, stringsAsFactors = FALSE) Chequeamos un resumen del contenido del dataset: summary(delitos) ## id comuna barrio latitud ## Min. : 1 Length:184879 Length:184879 Min. :-34.71 ## 1st Qu.: 46220 Class :character Class :character 1st Qu.:-34.63 ## Median : 92440 Mode :character Mode :character Median :-34.61 ## Mean : 92440 Mean :-34.59 ## 3rd Qu.:138660 3rd Qu.:-34.59 ## Max. :184879 Max. : 0.00 ## longitud fecha hora uso_arma ## Min. :-58.53 Length:184879 Length:184879 Length:184879 ## 1st Qu.:-58.47 Class :character Class :character Class :character ## Median :-58.44 Mode :character Mode :character Mode :character ## Mean :-58.40 ## 3rd Qu.:-58.40 ## Max. : 0.00 ## uso_moto lugar origen_dato tipo_delito ## Length:184879 Length:184879 Mode:logical Length:184879 ## Class :character Class :character NA&#39;s:184879 Class :character ## Mode :character Mode :character Mode :character ## ## ## ## cantidad_vehiculos cantidad_victimas ## Min. : 0.0000 Min. :0.000000 ## 1st Qu.: 0.0000 1st Qu.:0.000000 ## Median : 0.0000 Median :0.000000 ## Mean : 0.2081 Mean :0.001168 ## 3rd Qu.: 0.0000 3rd Qu.:0.000000 ## Max. :12.0000 Max. :2.000000 Mirando el resumen nos enteramos de que la hora más habitual para un delito son las 8 de la noche, que el delito más frecuente es el hurto sin violencia, y que el lugar más habitual donde ocurren los incidentes es en la vía pública, entre otras cosas. 5.0.1 Trabajando con fechas La fecha es un tipo de dato que puede ser expresado de muchas maneras, dependiendo de que nos interese teer en cuenta el día de la semana al que corresponde, el mes, el año, etc. El paquete lubridate hace facil extraer de fechas en cualquier formato (por ejemplo “20/07/2018”) el atributo relacionado que deseemos (como “viernes” o “Julio”). Para empezar, convertimos el campo “fecha” al tipo de dato especializado que se llama… fecha (date). Aquí tenemos que prestar atención al formato en que aparecen, en general algo como “2018-07-21” (mes, día y año) o “2018-07-21 12:14:24” (mes, día, año y hora, minutos, segundos). Con nuestros datos se da el primer caso, por lo cual la función para convertir ese campo en fecha es ymd(); para el segundo caso, seria ymd_hms() library(tidyverse) library(lubridate) delitos &lt;- delitos %&gt;% mutate(fecha = ymd(fecha)) Repasemos algunas de los nuevos trucos que podemos hacer con el tiempo. Tomemos cinco fechas elegidas al azar: set.seed(&quot;99&quot;) muestra_de_fechas &lt;- delitos %&gt;% mutate(fecha_hora = paste(fecha, hora)) %&gt;% sample_n(5) %&gt;% pull(fecha_hora) muestra_de_fechas ## [1] &quot;2016-07-07 20:00:00&quot; &quot;2016-09-07 13:25:00&quot; &quot;2016-04-09 15:00:00&quot; ## [4] &quot;2016-08-12 00:00:00&quot; &quot;2016-01-24 00:00:00&quot; Mediante las funciones diponibles en lubridate, podemos extraer: El día de la semana al que corresponde cada fecha: wday(muestra_de_fechas) ## [1] 5 4 7 6 1 wday(muestra_de_fechas, label = TRUE) ## [1] jue mié sáb vie dom ## Levels: dom &lt; lun &lt; mar &lt; mié &lt; jue &lt; vie &lt; sáb El mes: month(muestra_de_fechas) ## [1] 7 9 4 8 1 month(muestra_de_fechas, label = TRUE) ## [1] jul sep abr ago ene ## 12 Levels: ene &lt; feb &lt; mar &lt; abr &lt; may &lt; jun &lt; jul &lt; ago &lt; sep &lt; ... &lt; dic El año: year(muestra_de_fechas) ## [1] 2016 2016 2016 2016 2016 Y varias opciones más, que se pueden repasar en https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html Con lo visto hasta aquí, tenemos suficiente para mostrar patrones temporales en los datos. Delitos registrados por año: options(scipen = 20) ggplot(delitos) + geom_bar(aes(x = year(fecha))) Los resultados no permiten comparar entre años, ya que el dataset tiene apenas un puñado de registros en el 2015, y sólo llega a mediados del 2017. Lección: quedémonos sólo con el 2016 y miremos dentro. delitos %&gt;% filter(year(fecha) == 2016) %&gt;% ggplot() + geom_bar(aes(x = month(fecha, label = TRUE))) Se ve bastante parejo! Quizás haya que examinar los delitos por tipo, para ver si hay algunos que muestran altibajos según la estación. Veamos el top 5 de delitos por frecuencia. delitos %&gt;% count(tipo_delito) %&gt;% top_n(5) %&gt;% arrange(desc(n)) ## # A tibble: 5 x 2 ## tipo_delito n ## &lt;chr&gt; &lt;int&gt; ## 1 Robo (Con violencia) 90393 ## 2 Hurto (Sin violencia) 41205 ## 3 Lesiones Seg Vial 12791 ## 4 Hurto De Rueda 9904 ## 5 Hurto Automotor 9144 Luce razonable. Guardamos la lista de delitos más frecuentes para referenciar luego. delitos_frecuentes &lt;- delitos %&gt;% count(tipo_delito) %&gt;% top_n(5) %&gt;% pull(tipo_delito) Y ahora los comparamos. En gráfico de barras “apilado”: delitos %&gt;% filter(year(fecha) == 2016, tipo_delito %in% delitos_frecuentes) %&gt;% ggplot() + geom_bar(aes(x = month(fecha, label = TRUE), fill = tipo_delito)) … y sin apilar delitos %&gt;% filter(year(fecha) == 2016, tipo_delito %in% delitos_frecuentes) %&gt;% ggplot() + geom_bar(aes(x = month(fecha, label = TRUE), fill = tipo_delito), position = &quot;dodge&quot;) O como líneas: # Primero realizamos un conteo de delitos por tipo y por mes del año conteo &lt;- delitos %&gt;% filter(year(fecha) == 2016, tipo_delito %in% delitos_frecuentes) %&gt;% count(tipo_delito, mes = month(fecha, label = TRUE)) # Y ahora a mostras las cantidades mensuales como líneas ggplot(conteo) + geom_line(aes(x = mes, y = n, group = tipo_delito, color = tipo_delito)) Ésta última opción es sin dudas la más clara, tanto para mostrar la diferencia relativa en el volumen de incidentes, como para indicar si existen fluctuaciones. Intentémoslo otra vez, ahora con el día de la semana: # Primero realizamos un conteo de delitos por tipo y por día de la semana conteo &lt;- delitos %&gt;% filter(year(fecha) == 2016, tipo_delito %in% delitos_frecuentes) %&gt;% count(tipo_delito, diasemana = wday(fecha, label = TRUE)) # Y ahora a mostras las cantidades mensuales como líneas ggplot(conteo) + geom_line(aes(x = diasemana, y = n, group = tipo_delito, color = tipo_delito)) Como algunas categorías están mucho menos representadas, y quedan “aplastadas” en el gráfico con lo que se dificulta su legibilidad. Vamos a comparar porcentajes en lugar de valores absolutos. conteo &lt;- conteo %&gt;% group_by(tipo_delito) %&gt;% mutate(pct = n / sum(n) * 100) ggplot(conteo) + geom_line(aes(x = diasemana, y = pct, group = tipo_delito, color = tipo_delito)) La diferencia de volumen según el día parece drástica, pero es engañosa: el eje de las \\(y\\) no empieza en 0, lo cual hace que las diferencias se perciban mayores de lo que son. Forzamos al gráfico a comenzar desde 0 el eje \\(y\\): ggplot(conteo) + geom_line(aes(x = diasemana, y = pct, group = tipo_delito, color = tipo_delito))+ expand_limits(y = 0) Sin dudas, los domingos son el día en que el delito descansa un poco… excepto pra quienes deciden llevarse un auto o al menos una rueda ajena. El pico de delitos reportados ocurre los viernes, con la excepción del hurto de rueda, que crece de domingo a miércoles y luego decae. Recordando que los homicidios suelen tener un contexto muy distinto al de los robos, agreguemos la categoría “Homicidio Doloso” para comparar con las demás. conteo_homicidios &lt;- delitos %&gt;% filter(year(fecha) == 2016, tipo_delito == &quot;Homicidio Doloso&quot;) %&gt;% count(tipo_delito, diasemana = wday(fecha, label = TRUE)) %&gt;% group_by(tipo_delito) %&gt;% mutate(pct = n / sum(n) *100) Sumamos la nueva categoría: ggplot(conteo) + geom_line(aes(x = diasemana, y = pct, group = tipo_delito, color = tipo_delito)) + geom_line(data = conteo_homicidios, aes(x = diasemana, y = pct, group = tipo_delito)) + labs(title = &quot;Distribución diaria por tipo de delito&quot;, subtitle = &quot;La línea negra representa homicidios&quot;, x = &quot;día&quot;, y = &quot;%&quot;, color = &quot;Delitos más frecuentes&quot;) + expand_limits(y = 0) La categoría homicidio muestra un ritmo inverso al de los otros delitos: es más frecuente durante el fin de semana, decayendo en los días hábiles. También podemos evaluar el ritmo según la hora del día. Para ello necesitamos pasar a formato temporal la columna “hora”, que en éste dataset tiene el formato “hh:mm:ss” (por ejemplo, “14:55:00”). La función correspondiente para interpretar ese formato es hms(). Usamos una combinacion de hms() para interpretar el texto en “hora” como una variable de tipo tiempo, y hour() para extraer la hora base -por ejemplo, para “19:55:00” la hora base es 19. por_hora &lt;- delitos %&gt;% filter(year(fecha) == 2016, tipo_delito %in% delitos_frecuentes) %&gt;% count(tipo_delito, hora_base = hour(hms(hora))) %&gt;% group_by(tipo_delito) %&gt;% mutate(pct = n / sum(n) *100) ggplot(por_hora) + geom_line(aes(x = hora_base, y = pct, group = tipo_delito, color = tipo_delito)) + labs(title = &quot;Distribución horaria por tipo de delito&quot;, x = &quot;hora&quot;, y = &quot;%&quot;, color = &quot;Delitos más frecuentes&quot;) + expand_limits(y = 0) + scale_x_continuous(breaks = 0:23) Para los delitos relacionados con automóviles, el “prime time” es como el de la TV, de 20 a 22. Los robos violentos tienen su apogeo durante las 20. Las lesiones viales comparten su hora pico con el tráfico. Los hurtos tienen su momento cúlmine a la hora del almuerzo, y a la de salida de la oficina. 5.1 Mirando al espacio Pasemos a hora al análisis espacial de nuestros datos. Para facilitar la visualización vamos a usar el paquete ggmap, que incluye varias funciones que facilitan la creación de mapas. library(ggmap) 5.1.1 Obteniendo un mapa base Para obtener un mapa de fondo, obtenemos el “bounding box” de nuestros datos, y luego se los pasamos a get_stamenmap(). Para más detalles sobre la descarga de mapas base, ver http://rpubs.com/HAVB/mapeo_tweets. delitos &lt;- delitos %&gt;% filter(latitud &lt;0, longitud &lt;0) bbox &lt;- c(min(delitos$longitud, na.rm = TRUE), min(delitos$latitud, na.rm = TRUE), max(delitos$longitud, na.rm = TRUE), max(delitos$latitud, na.rm = TRUE)) CABA &lt;- get_stamenmap(bbox = bbox, maptype = &quot;toner-lite&quot;) Para verlo: ggmap(CABA) 5.1.2 De coordenadas al mapa De aquí en más podemos suporponer nuestros datos en distintas capas, con la misma sintaxis que conocemos de ggplot. Para mapear las ubicaciones de los delitos en el dataset, usamos geom_point() y los campos de longitud y latitud para los ejes \\(x\\) e \\(y\\): ggmap(CABA) + geom_point(data = delitos, aes(x = longitud, y = latitud)) Aquí nos topamos con un problema, habitual al trabajar con grandes volúmenes de datos. Hay tantos puntos proyectados sobre el mapa, que se hace imposible interepretar donde existen más o menos. Hacemos algunso ajustes: un color más llamativo, un tamaño de punto más pequeño, y aplicación de una ligera transparencia, vía los atributos “color”, “size” y “alpha”. ¿Cuál es el valor ideal para cada uno? En general, no queda otra que recurrir a la prueba y error para encontrar la receta justa. ggmap(CABA) + geom_point(data = delitos, aes(x = longitud, y = latitud), color = &quot;orange&quot;, size = 0.1, alpha = 0.1) Ahora si aparecen ciertos patrones, por ejemplo la afinidad del delito con las grandes vías de circulación de la ciudad. Aún así, se hace dificil identificar de un golpe de vsta las “zonas calientes”, los puntos de máxima concentración. 5.1.3 Mapas de densidad Una solución práctica para el problema de la cantidad de puntos es una técnica llamada “binning”: dividir el espacio en una grilla de celdas, contar cuantos puntos caen dentro de cada una, y visualizar las cantidades agregadas. Hacerlo es muy fácil vía geom_bind2d(). ggmap(CABA) + geom_bin2d(data = delitos, aes(x = longitud, y = latitud)) Ahora si, resaltan las áreas de mayor concentración de incidentes. Se puede mejorar un poco el gráfico usando una mayot cantidad de celdas para aumentar la resolución. También empleando una escala de colores diseñada para ayudar a detectar diferencias por tonalidad, como viridis. ggmap(CABA) + geom_bin2d(data = delitos, aes(x = longitud, y = latitud), bins = 100) + scale_fill_viridis_c() Una alternativa al binning es la llamada kernel density estimation, muy utilizada en aplicaciones GIS para estimar la intensidad de una determinada variable en cualquier punto del área analizada, incluso en aquellos donde no hay observaciones. La idea es asumir que los valores observados corresponden a una distribución continua sobre el espacio, y determinar cual es la más probable en base a los puntos con datos. No hace falta realizar ningún cálculo matemático, sólo usar geom_density2d así: ggmap(CABA) + geom_density2d(data = delitos, aes(x = longitud, y = latitud, color = stat(level))) + scale_color_viridis_c() 5.1.4 Visualizando multiples categorías Hasta aquí hemos analizado la distribución espacil del delito en su totalidad, sin diferenciar su tipo. Veamos ahora las difrencias por categoría. Podemos reintentar el mapa de puntos, esta vez filtrando los tipos de delito para incluir sólo los más frecuentes, y diferenciándolos por color. ggmap(CABA) + geom_point(data = filter(delitos, tipo_delito %in% delitos_frecuentes), aes(x = longitud, y = latitud, color = tipo_delito), size = 0.1, alpha = 0.1) Aquí tenemos dos problemas: La leyenda (“tipo_delito”) es difícil de leer, dado que muestra los puntos tal como los definimos: pequeños y con mucha transparencia. Esos atributos son útiles en el mapa, donde tenemos cientos de miles de puntos, pero muy poco prácticos para la leyenda, donde sólo hay uno por etiqueta. Los puntos sobre el mapa se superponen en tal medida que es dificil discenir patrones espaciales distintos según su categoría. El primer problema se resuelve fijando “a mano” los atributos de la lyenda, asi: ggmap(CABA) + geom_point(data = filter(delitos, tipo_delito %in% delitos_frecuentes), aes(x = longitud, y = latitud, color = tipo_delito), size = 0.1, alpha = 0.1) + guides(color = guide_legend(override.aes = list(size=2, alpha = 1))) + scale_color_brewer(palette = &quot;Set1&quot;) El segundo, usando facetado para mostrar en su propio mapa a cada categoría: ggmap(CABA) + geom_point(data = filter(delitos, tipo_delito %in% delitos_frecuentes), aes(x = longitud, y = latitud, color = tipo_delito), size = 0.1, alpha = 0.1) + scale_color_brewer(palette = &quot;Set1&quot;) + facet_wrap(~tipo_delito) El facetado ayuda. Se hacie evidente, por ejemplo, que el patrón espacial de las lesiones en seguridad vial es muy distinto al de hurto automotor. Para hacer las diferencias aún mas nítidas, podemos facetar una estimación de densidad: ggmap(CABA) + geom_density2d(data = filter(delitos, tipo_delito %in% delitos_frecuentes), aes(x = longitud, y = latitud, color = stat(level))) + scale_color_viridis_c() + facet_wrap(~tipo_delito) 5.1.5 Combinando espacio y tiempo El facetado también nos permite visualizar el cambio de posición a través del tiempo. Por ejemplo, podemos comparar dos tipos de delito (hurto sin violencia y hurto de rueda) mostrando dónde ocuren en cada día de la semana. delitos &lt;- delitos %&gt;% mutate(dia_semana = wday(fecha, label = TRUE)) ggmap(CABA) + geom_point(data = filter(delitos, tipo_delito %in% c(&quot;Hurto (Sin violencia)&quot;, &quot;Hurto De Rueda&quot;)), aes(x = longitud, y = latitud, color = tipo_delito), alpha = .5, size = .2) + facet_wrap(~dia_semana) O concentrarnos en un tipo de delito en particular, y evaluar en que zonas se concentra de acuerdo a la hora del día: delitos &lt;- delitos %&gt;% mutate(hora_base = hour(hms(hora))) ggmap(CABA) + geom_density2d(data = filter(delitos, tipo_delito == &quot;Hurto (Sin violencia)&quot;, !(wday(fecha) %in% 2:5) ), aes(x = longitud, y = latitud, color = stat(level))) + scale_color_viridis_c() + facet_wrap(~hora_base, nrow = 4) + labs(title = &quot;Concentración espacial de hurtos&quot;, subtitle = &quot;según hora del día&quot;) "],
["analizando-movimiento-el-flujo-de-viajes-urbanos.html", "Capítulo 6 Analizando movimiento: el flujo de viajes urbanos 6.1 Estimando rutas 6.2 Cuantificando interacción 6.3 Estimando rutas 6.4 EXTRA: Cómo obtener las rutas de todos los recorridos", " Capítulo 6 Analizando movimiento: el flujo de viajes urbanos Los sistemas urbanos se caracterizan por dinámicas continuas de flujo, como el viaje de las personas entre su lugar de trabajo y de residencia. Estas dinámicas son capturadas en diversas bases de datos con creciente grado de granularidad espacio-temporal. La disponibilidad de coordenadas precisas de origen y destino, combinada con la posibilidad de acceder a sistemas de ruteo en calles, nos permite estimar los trayectos realizado por personas y vehículos representados en bases de datos. 6.1 Estimando rutas En general, los datos de flujo disponibles en datasets a escala metropolitana (en contraste con los datos personales como los de GPS) son simples pares origen/destino. Una ejemplo de datos abiertos de este tipo, es el de la ubicación y intercambio entre estaciones de sistemas de bicicletas compartidas. Por ejemplo, el portal de datos abiertos de la Ciudad de Buenos Aires ofrece datasets con los trayectos realizados por los usuarios del sistema de bicicletas públicas, así como la ubicación de las estaciones. Si no lo hemos hecho aún, carguemos las librerías que vamos a necesitar. library(tidyverse) library(ggmap) Utilizaremos una porción de todos los trayectos disponibles, los que representan viajes en bicicletas públicas realizados durante el mes de abril de 2017: viajes &lt;- read_csv(&quot;https://bitsandbricks.github.io/data/viajes_BA_bici_abril_2017.csv&quot;) viajes ## # A tibble: 113,650 x 6 ## HORA ORIGEN_ESTACION NOMBRE_ORIGEN DESTINO_ESTACION ## &lt;dttm&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2017-04-01 00:00:00 1 FACULTAD DE … 42 ## 2 2017-04-01 00:00:00 5 PLAZA ITALIA 14 ## 3 2017-04-01 00:00:00 5 PLAZA ITALIA 20 ## 4 2017-04-01 00:00:00 5 PLAZA ITALIA 69 ## 5 2017-04-01 00:00:00 5 PLAZA ITALIA 94 ## 6 2017-04-01 00:00:00 5 PLAZA ITALIA 123 ## 7 2017-04-01 00:00:00 6 PARQUE LEZAMA 17 ## 8 2017-04-01 00:00:00 6 PARQUE LEZAMA 28 ## 9 2017-04-01 00:00:00 6 PARQUE LEZAMA 118 ## 10 2017-04-01 00:00:00 8 CONGRESO 1 ## # … with 113,640 more rows, and 2 more variables: NOMBRE_DESTINO &lt;chr&gt;, ## # TOTAL &lt;dbl&gt; También descargamos un archivo de información geográfica con la posición de cada estación de bicicletas públicas: estaciones &lt;- read.csv(&quot;https://bitsandbricks.github.io/data/estaciones_BA_bici.csv&quot;) estaciones ## X Y NOMBRE ## 1 -58.39245 -34.58313 FACULTAD DE DERECHO ## 2 -58.37482 -34.59259 RETIRO ## 3 -58.36892 -34.61124 ADUANA ## 4 -58.36895 -34.60172 PLAZA ROMA ## 5 -58.36971 -34.62830 PARQUE LEZAMA ## 6 -58.42100 -34.58013 PLAZA ITALIA ## 7 -58.38099 -34.60584 OBELISCO ## 8 -58.38925 -34.60993 CONGRESO ## 9 -58.40714 -34.58391 PARQUE LAS HERAS ## 10 -58.36575 -34.61555 PUERTO MADERO - UCA ## 11 -58.38502 -34.60131 TRIBUNALES ## 12 -58.38895 -34.59318 PLAZA VICENTE LOPEZ ## 13 -58.40660 -34.60962 ONCE ## 14 -58.42632 -34.57779 PACIFICO ## 15 -58.39852 -34.59919 PLAZA HOUSSAY ## 16 -58.37472 -34.60996 LEGISLATURA (EX PLAZA DE MAYO) ## 17 -58.41883 -34.60640 PLAZA ALMAGRO ## 18 -58.38048 -34.61737 INDEPENDENCIA ## 19 -58.37755 -34.59540 PLAZA SAN MARTIN ## 20 -58.44179 -34.58004 DISTRITO AUDIOVISUAL ## 21 -58.38257 -34.59410 ARENALES ## 22 -58.37957 -34.60030 SUIPACHA ## 23 -58.38077 -34.61057 ALSINA ## 24 -58.41607 -34.58952 PLAZA GUEMES ## 25 -58.36360 -34.60100 JUANA MANSO ## 26 -58.38990 -34.59957 MONTEVIDEO ## 27 -58.41240 -34.62285 PLAZA BOEDO ## 28 -58.43458 -34.60846 PARQUE CENTENARIO ## 29 -58.40661 -34.64003 PARQUE PATRICIOS ## 30 -58.39738 -34.59039 PEÑA ## 31 -58.37353 -34.60773 CATEDRAL ## 32 -58.37186 -34.59633 INGENIERO BUTTY ## 33 -58.37660 -34.60537 MAIPU ## 34 -58.37786 -34.60791 PIEDRAS ## 35 -58.38290 -34.59699 PLAZA LIBERTAD ## 36 -58.40759 -34.63652 URQUIZA ## 37 -58.39872 -34.59713 FACULTAD DE MEDICINA ## 38 -58.37416 -34.59958 GALERIAS PACIFICO ## 39 -58.37337 -34.60440 SARMIENTO ## 40 -58.41459 -34.57549 ZOOLOGICO ## 41 -58.38245 -34.60159 TUCUMAN ## 42 -58.37439 -34.61638 CHILE ## 43 -58.37690 -34.59852 CORDOBA ## 44 -58.37428 -34.59588 RICARDO ROJAS ## 45 -58.37965 -34.60464 DIAGONAL NORTE ## 46 -58.37116 -34.60164 25 DE MAYO ## 47 -58.38540 -34.60665 RIVAROLA ## 48 -58.37058 -34.61338 BELGRANO ## 49 -58.41467 -34.60709 SANCHEZ DE BUSTAMANTE ## 50 -58.42627 -34.60743 HOSPITAL ITALIANO ## 51 -58.41150 -34.59022 CORONEL DIAZ ## 52 -58.41594 -34.58722 JULIAN ALVAREZ ## 53 -58.37159 -34.60549 PERON ## 54 -58.43463 -34.57519 MINISTRO CARRANZA ## 55 -58.42507 -34.58937 PLAZA PALERMO VIEJO ## 56 -58.39493 -34.60757 AYACUCHO ## 57 -58.39444 -34.59415 RIOBAMBA ## 58 -58.43971 -34.60316 PADILLA ## 59 -58.44944 -34.59182 GUZMAN ## 60 -58.38284 -34.60300 CERRITO ## 61 -58.43424 -34.60457 INSTITUTO LELOIR ## 62 -58.37356 -34.61078 COLEGIO NACIONAL BUENOS AIRES ## 63 -58.37083 -34.60909 MINISTERIO DE ECONOMIA ## 64 -58.37817 -34.60209 ESMERALDA ## 65 -58.40436 -34.59586 ECUADOR ## 66 -58.37455 -34.61365 VENEZUELA ## 67 -58.37272 -34.59947 RECONQUISTA ## 68 -58.43562 -34.59628 MALABIA ## 69 -58.41158 -34.60289 CARLOS GARDEL ## 70 -58.42827 -34.60082 YATAY ## 71 -58.39755 -34.61749 PASCO ## 72 -58.37088 -34.61585 BALCARCE ## 73 -58.37812 -34.61171 MORENO ## 74 -58.37254 -34.59475 DELLA PAOLERA ## 75 -58.39547 -34.60229 LAVALLE ## 76 -58.40903 -34.59462 AGUERO ## 77 -58.41386 -34.59463 BILLINGHURST ## 78 -58.42582 -34.59267 ARAOZ ## 79 -58.36962 -34.59934 BOUCHARD ## 80 -58.39079 -34.58781 QUINTANA ## 81 -58.40115 -34.58368 HOSPITAL RIVADAVIA ## 82 -58.40423 -34.61287 MISIONES ## 83 -58.38034 -34.59142 SUIPACHA Y ARROYO ## 84 -58.43032 -34.62413 DOBLAS ## 85 -58.42548 -34.63850 SENILLOSA ## 86 -58.43154 -34.61983 GUAYAQUIL ## 87 -58.42740 -34.63525 AVELINO DIAZ ## 88 -58.42242 -34.62882 TREINTA Y TRES ORIENTALES ## 89 -58.40172 -34.62136 SAAVEDRA ## 90 -58.39332 -34.58915 CEMENTERIO DE LA RECOLETA ## 91 -58.36397 -34.61172 AZUCENA VILLAFLOR ## 92 -58.36309 -34.61808 VERA PEÑALOZA ## 93 -58.40283 -34.61681 MEXICO ## 94 -58.39590 -34.61520 RINCON ## 95 -58.40502 -34.63172 SALCEDO ## 96 -58.39483 -34.61127 SARANDI ## 97 -58.39890 -34.61212 PLAZA PRIMERO DE MAYO ## 98 -58.40911 -34.61755 HOSPITAL RAMOS MEJIA ## 99 -58.36091 -34.61181 AIME PAINE ## 100 -58.44290 -34.59981 ACEVEDO ## 101 -58.44242 -34.58905 FITZ ROY ## 102 -58.35626 -34.62878 USINA DEL ARTE ## 103 -58.41552 -34.61188 DON BOSCO ## 104 -58.35913 -34.61749 JULIETA LANTERI ## 105 -58.41968 -34.60206 HUMAHUACA ## 106 -58.38691 -34.60162 URUGUAY ## 107 -58.38077 -34.61239 9 DE JULIO ## 108 -58.39768 -34.58837 EMILIO MITRE ## 109 -58.36823 -34.60413 PLAZA HIPOLITO BOUCHARD ## 110 -58.37368 -34.60312 CORRIENTES ## 111 -58.37976 -34.59646 MARCELO T. DE ALVEAR ## 112 -58.38143 -34.61536 LIMA ## 113 -58.41210 -34.60022 GALLO ## 114 -58.36676 -34.61807 FACULTAD DE INGENIERIA ## 115 -58.37811 -34.60372 ESMERALDA Y CORRIENTES ## 116 -58.40096 -34.63398 15 DE NOVIEMBRE ## 117 -58.42170 -34.59822 ACUÑA DE FIGUEROA ## 118 -58.43677 -34.59271 CASTILLO ## 119 -58.41546 -34.60176 GUARDIA VIEJA ## 120 -58.42041 -34.59162 COSTA RICA ## 121 -58.42959 -34.59669 LERMA ## 122 -58.39937 -34.58712 GUTIERREZ ## 123 -58.40579 -34.60178 PUEYRREDON ## 124 -58.42520 -34.58567 GUATEMALA ## 125 -58.43495 -34.60016 VELASCO ## 126 -58.42878 -34.61506 HIPOLITO YRIGOYEN ## 127 -58.42104 -34.58542 ARMENIA ## 128 -58.41231 -34.58108 UGARTECHE ## 129 -58.41315 -34.63331 VIRREY LINIERS ## 130 -58.41578 -34.63515 LAS CASAS ## 131 -58.36093 -34.63407 PINZON ## 132 -58.40531 -34.58247 CABELLO ## 133 -58.36943 -34.63997 MINISTERIO DE JUSTICIA Y SEGURIDAD ## 134 -58.45506 -34.58755 FEDERICO LACROZE ## 135 -58.37171 -34.63081 RUY DIAZ DE GUZMAN ## 136 -58.38091 -34.60823 RIVADAVIA Y 9 DE JULIO ## 137 -58.37475 -34.62206 PLAZA CECILIA GRIERSON ## 138 -58.43784 -34.58047 RAVIGNANI ## 139 -58.41191 -34.59270 BILLINGHURST Y MANSILLA ## 140 -58.44510 -34.59284 VILLARROEL ## 141 -58.36208 -34.63069 JUAN MANUEL BLANES ## 142 -58.38842 -34.60300 PARANA ## 143 -58.37098 -34.62561 BRASIL ## 144 -58.40779 -34.62219 HOSPITAL FRANCES ## 145 -58.39477 -34.62060 CARLOS CALVO ## 146 -58.36300 -34.60497 MACACHA GUEMES ## 147 -58.40353 -34.57741 MALBA ## 148 -58.42021 -34.57296 GODOY CRUZ Y LIBERTADOR ## 149 -58.43523 -34.57819 RAVIGNANI Y GUATEMALA ## 150 -58.38777 -34.63495 HOSPITAL BRITANICO ## 151 -58.37429 -34.59194 RETIRO II ## 152 -58.37421 -34.59185 RETIRO III ## 153 -58.39594 -34.63044 HOSPITAL GARRAHAN ## 154 -58.43438 -34.58104 NICARAGUA ## 155 -58.41576 -34.60464 BILLINGHURST Y VALENTIN GOMEZ ## 156 -58.36747 -34.61593 AZOPARDO Y CHILE ## 157 -58.42822 -34.58348 ORO ## 158 -58.37422 -34.61994 HUMBERTO PRIMO ## 159 -58.40260 -34.59210 HOSPITAL ALEMAN ## 160 -58.39041 -34.61184 SOLIS Y ALSINA ## 161 -58.45293 -34.59221 SANTOS DUMONT Y OTERO ## 162 -58.42889 -34.59055 ARMENIA Y GORRITI ## 163 -58.37910 -34.62746 CONSTITUCION I ## 164 -58.37923 -34.62749 CONSTITUCION II ## 165 -58.41256 -34.64173 PARQUE JOSE EVARISTO URIBURU ## 166 -58.40662 -34.60936 ONCE II ## 167 -58.42795 -34.62831 SENILLOSA Y ZUVIRIA ## 168 -58.43740 -34.58504 GORRITI ## 169 -58.40195 -34.60924 LARREA Y BARTOLOME MITRE ## 170 -58.40597 -34.59973 SAN LUIS Y ECUADOR ## 171 -58.40785 -34.59776 PLAZA MONSEÑOR MIGUEL DE ANDREA ## 172 -58.38128 -34.61862 ESTADOS UNIDOS ## 173 -58.39953 -34.60324 PASTEUR ## 174 -58.40797 -34.57785 PLAZA ALEMANIA ## 175 -58.41192 -34.61202 FACULTAD DE PSICOLOGIA ## 176 -58.39155 -34.59726 MINISTERIO DE EDUCACION ## 177 -58.41216 -34.56807 PLANETARIO ## 178 -58.42487 -34.62346 JOSE MARMOL ## 179 -58.42047 -34.61980 CASTRO Y MEXICO ## 180 -58.38969 -34.61564 VIRREY CEVALLOS ## 181 -58.42178 -34.63137 AV PAVON Y 33 ORIENTALES ## 182 -58.40714 -34.61255 CATAMARCA ## 183 -58.38562 -34.59780 TALCAHUANO ## 184 -58.40597 -34.59111 ARENALES Y AGUERO ## 185 -58.42257 -34.60595 PERON Y FRANCISCO ACUÑA DE FIGUEROA ## 186 -58.43351 -34.61080 ARANGUREN ## 187 -58.39132 -34.63068 PEDRO ECHAGUE ## 188 -58.38559 -34.58847 POSADAS ## 189 -58.43179 -34.61767 PARQUE RIVADAVIA ## 190 -58.38745 -34.62705 PLAZA GARAY ## 191 -58.41123 -34.58508 JUNCAL ## 192 -58.42348 -34.61360 QUINTINO BOCAYUVA ## 193 -58.41588 -34.62244 ESTADOS UNIDOS Y BOEDO ## 194 -58.40414 -34.63438 HOSPITAL SARDA ## 195 -58.36602 -34.62778 HOSPITAL ARGERICH ## 196 -58.38765 -34.60899 CONGRESO II ## 197 -58.44599 -34.58644 ROSETI ## 198 -58.40436 -34.58819 AUSTRIA Y FRENCH ## 199 -58.36040 -34.63911 LA BOCA ## DOMICILIO ## 1 AV. PRES.FIGUEROA ALCORTA Y JUAN A.BIBILONI ## 2 AV. DR.JOSE RAMOS MEJIA Y DEL LIBERTADOR AV ## 3 AV. ING.HUERGO Y AV. BELGRANO ## 4 LAVALLE Y BOUCHARD ## 5 AV MARTIN GARCIA E IRALA ## 6 AV. SANTA FE Y AV. SARMIENTO ## 7 AV. 9 DE JULIO Y TTE. GRAL JUAN DOMINGO PERON ## 8 AV. HIPOLITO YRIGOYEN Y VIRREY CEBALLOS ## 9 PARQUE LAS HERAS ## 10 MOREAU DE JUSTO 1500 ## 11 TRIBUNALES ## 12 PLAZA VICENTE LOPEZ ## 13 PLAZA MISERERE ## 14 PACIFICO ## 15 PLAZA HOUSSAY ## 16 PERU Y DIAGONAL SUR ## 17 PLAZA ALMAGRO ## 18 AV. INDEPENDENCIA Y 9 DE JULIO ## 19 PLAZA SAN MARTIN ## 20 ZAPIOLA Y DORREGO ## 21 ARENALES Y CERRITO ## 22 SUIPACHA Y VIAMONTE ## 23 ADOLFO ALSINA Y BERNARDO DE IRIGOYEN ## 24 SALGUERO JERONIMO Y MANSILLA ## 25 EMMA DE LA BARRA Y JUANA MANSO ## 26 AV. CORDOBA Y MONTEVIDEO ## 27 CARLOS CALVO ENTRE VIRREY LINIERS Y SANCHEZ DE LORIA ## 28 PATRICIAS ARGENTINAS Y CARLOS FINLAY ## 29 IGUAZU Y USPALLATA ## 30 AZCUENAGA Y PEÑA ## 31 SAN MARTIN Y RIVADAVIA ## 32 ING. BUTTY Y LEANDRO N. ALEM ## 33 MAIPU Y SARMIENTO ## 34 ESMERALDA Y RIVADAVIA ## 35 CERRITO Y MARCELO T. DE ALVEAR ## 36 GRAL URQUIZA Y RONDEAU ## 37 URIBURU Y MARCELO T. DE ALVEAR ## 38 SAN MARTIN 710, ENTRE VIAMONTE Y CORDOBA ## 39 SARMIENTO 481, ENTRE RECONQUISTA Y SAN MARTIN ## 40 AV DEL LIBERTADOR Y AV SARMIENTO ## 41 TUCUMAN Y CERRITO ## 42 PERU 726 ## 43 MAIPU 820 ## 44 SAN MARTIN 1031 ## 45 ROQUE SAENZ PEÑA Y SUIPACHA ## 46 25 DE MAYO Y LAVALLE ## 47 DR. RODOLFO RIVAROLA 175 ENTRE TTE. GRAL. JUAN DOMINGO PERON Y BARTOLOME MITRE ## 48 BALCARCE 482 ENTRE BELGRANO Y VENEZUELA ## 49 SANCHEZ DE BUSTAMANTE Y PERON JUAN ## 50 RAWSON ENTRE POTOSI Y DIAZ VELEZ ## 51 GÜEMES 3328 Y CORONEL DIAZ ## 52 GÜEMES 3822 ENTRE JULIAN ALVAREZ Y ARAOZ ## 53 PERON JUAN ENTRE 25 DE MAYO Y RECONQUISTA ## 54 SANTA FE 5327 ENTRE DORREGO Y AREVALO ## 55 COSTA RICA Y MALABIA ## 56 AYACUCHO ENTRE PERON JUAN Y BARTOLOME MITRE ## 57 RIOBAMBA Y JUNCAL ## 58 PADILLA Y WARNES AV ## 59 GUZMAN Y LEIVA ## 60 AV. ROQUE SAENZ PEÑA 1149 ENTRE LIBERTAD Y CERRITO ## 61 AV. PATRICIAS ARGENTINAS 401, ENTRE JUANA DE IBARBOUROU Y AV. MACHADO ## 62 BOLIVAR ENTRE ADOLFO ALSINA Y MORENO ## 63 BALCARCE 101 ENTRE AV. HIPOLITO YRIGOYEN Y ALSINA ## 64 ESMERALDA 510 ## 65 ECUADOR 1200 Y MANSILLA ## 66 PERU 490 Y VENEZUELA ## 67 RECONQUISTA 716 Y AV CORDOBA ## 68 MALABIA 780 Y LOYOLA ## 69 GUARDIA VIEJA 3302 ## 70 YATAY 925 ENTRE HUMAHUACA Y GUARDIA VIEJA ## 71 PASCO 708 ENTRE CHILE Y AV INDEPENDENCIA ## 72 BALCARCE 683 ENTRE CHILE Y DEFENSA ## 73 MORENO 834 ENTRE TACUARI Y PIEDRAS ## 74 CARLOS M. DELLA PAOLERA 297 ENTRE LEANDRO N ALEM Y EDUARDO MADERO ## 75 AYACUCHO 595 ENTRE TUCUMAN Y LAVALLE ## 76 AGUERO Y MANSILLA ## 77 DE LA CARCOVA 3508 ## 78 ARAOZ 1413 ENTRE GORRITI Y HONDURAS ## 79 VIAMONTE 101 Y BOUCHARD ## 80 MANUEL QUINTANA 600 ## 81 LUCENA PEREYRA 2516 ENTRE LAS HERAS Y PAGANO ## 82 MISIONES ENTRE ADOLFO ALSINA Y MORENO ## 83 ARROYO Y SUIPACHA ## 84 DOBLAS 608 Y VALLE ## 85 SENILLOSA 1905 Y ZAÑARTU ## 86 GUAYAQUIL 213 Y DOBLAS ## 87 AVELINO DIAZ 499 Y DOBLAS ## 88 CONSTITUCION 4101 Y TREINTA Y TRES ORIENTALES ## 89 SAAVEDRA 1027 ENTRE CARLOS CALVO Y HUMBERTO 1º ## 90 VICENTE LOPEZ 2050 ENTRE JUNIN Y URIBURU ## 91 AZUCENA VILLAFLOR Y PIERINA DEALESSI ## 92 ROSARIO VERA PEÑALOZA Y OLGA COSSETTINI ## 93 SAAVEDRA Y MEXICO ## 94 VENEZUELA 2091 Y RINCON ## 95 SALCEDO 2908 Y DEAN FUNES ## 96 SARANDI ENTRE ADOLFO ALSINA E HIPOLITO YRIGOYEN ## 97 PICHINCHA ENTRE ADOLFO ALSINA Y MORENO ## 98 AGRELO ENTRE GRAL. URQUIZA, Y GRAL. LA RIOJA ## 99 AZUCENA VILLAFLOR 553 ENTRE CALABRIA Y AIME PAINE ## 100 ACEVEDO Y PADILLA ## 101 FITZ ROY 1092 Y LOYOLA ## 102 CAFFARENA AGUSTIN Y DON PEDRO DE MENDOZA ## 103 DON BOSCO Y VIRREY LINIERS ## 104 VERA PEÑALOSA ENTRE CALABRIA Y JULIETA LANTERI ## 105 HUMAHUACA 3918 ## 106 TUCUMAN Y URUGUAY ## 107 9 DE JULIO Y MORENO ## 108 PLAZA EMILIO MITRE - LARREA Y PACHECO DE MELO ## 109 PLAZA HIPOLITO BOUCHARD - AV EDUARDO MADERO Y PERON JUAN ## 110 AV CORRIENTES Y SAN MARTIN ## 111 MARCELO T DE ALVEAR Y SUIPACHA ## 112 LIMA Y MEXICO ## 113 GALLO Y TUCUMAN ## 114 ESTADOS UNIDOS ENTRE AZOPARDO Y HUERGO AV ## 115 ESMERALDA Y AV CORRIENTES ## 116 15 DE NOVIEMBRE DE 1889 2687 ENTRE CATAMARCA Y JUJUY ## 117 LAVALLE Y ACUÑA DE FIGUEROA ## 118 CASTILLO 815 ENTRE THAMES Y SERRANO ## 119 GUARDIA VIEJA 3606 ENTRE BILLINGHURST Y MARIO BRAVO ## 120 COSTA RICA 4090 Y ACUÑA DE FIGUEROA ## 121 LERMA 185 Y JULIAN ALVAREZ ## 122 JUAN MARIA GUTIERREZ ENTRE AGUERO Y LAPRIDA ## 123 BOULOGNE SUR MER Y TUCUMAN ## 124 GUATEMALA 4799 ENTRE J.L. BORGES Y GURRUCHAGA ## 125 VELASCO 285 ENTRE JULIAN ALVAREZ Y LAVALLEJA ## 126 HIPOLITO YRIGOYEN ENTRE MUÑIZ Y LA PLATA ## 127 ARMENIA 2393 Y CHARCAS ## 128 UGARTECHE ENTRE CABELLO Y LAS HERAS ## 129 SALCEDO 3401 Y VIRREY LINIERS ## 130 LAS CASAS 3587 ENTRE AV. BOEDO Y ALZAGA ## 131 PINZON 469 Y MARTIN RODRIGUEZ ## 132 CABELLO ENTRE CNEL DIAZ Y ORTIZ DE OCAMPO ## 133 REGIMIENTO DE PATRICIOS Y ARAOZ DE LAMADRID ## 134 AV CORRIENTES 6800 Y FEDERICO LACROZE ## 135 RUY DIAZ DE GUZMAN Y AV. MARTIN GARCIA ## 136 RIVADAVIA Y CARLOS PELLEGRINI ## 137 AV SAN JUAN 632 ## 138 RAVIGNANI 1883 Y COSTA RICA ## 139 BILLINGHURST 1533 Y MANSILLA ## 140 VILLARROEL Y HUMBOLDT ## 141 JUAN MANUEL BLANES 383 ## 142 LAVALLE ENTTRE MONTEVIDEO Y PARANA ## 143 BRASIL Y DEFENSA ## 144 HOSPITAL FRANCES: CARLOS CALVO Y LA RIOJA ## 145 CARLOS CALVO Y SARANDI ## 146 MACACHA GUEMES Y JUANA MANSO ## 147 AV FIGUEROA ALCORTA Y SAN MARTIN DE TOURS ## 148 GODOY CRUZ 3291 ENTRE AV DEL LIBERTADOR Y SEGUI ## 149 RAVIGNANI 2171 Y GUATEMALA ## 150 PERDRIEL Y FINOCHIETTO ENRIQUE ## 151 PLAZA FUERZA AEREA: AV. DR. J. RAMOS MEJIA Y AV DEL LIBERTADOR ## 152 PLAZA FUERZA AEREA: AV. DR. J. RAMOS MEJIA Y AV DEL LIBERTADOR ## 153 HOSPITAL GARRAHAN: AV BRASIL Y PICHINCHA ## 154 NICARAGUA 5690 ENTRE BONPLAND Y FITZ ROY ## 155 BILLINGHURST 455 Y VALENTIN GOMEZ ## 156 AZOPARDO 700 Y CHILE ## 157 FRAY JUSTO SANTAMARIA DE ORO Y GUATEMALA ## 158 PERU 1016 ENTRE HUMBERTO PRIMO Y CARLOS CALVO ## 159 BERUTI Y ECUADOR ## 160 SOLIS 225 Y ADOLFO ALSINA ## 161 SANTOS DUMONT 4380 Y OTERO ## 162 ARMENIA 1525 ENTRE GORRITI Y HONDURAS ## 163 AV BRASIL 1050 Y LIMA ## 164 AV BRASIL 1060 Y LIMA ## 165 PQUE. JOSE E. URIBURU - ALMAFUERTE 300 ## 166 BARTOLOME MITRE Y AV PUEYRREDON ## 167 SENILLOSA 989 Y ZUVIRIA ## 168 FITZ ROY 1590 Y GORRITI ## 169 LARREA ENTRE BARTOLOME MITRE Y AV RIVADAVIA ## 170 SAN LUIS 2862 ENTRE ECUADOR Y BOULOGNE SUR MER ## 171 PLAZA MONSEÑOR MIGUEL DE ANDREA (ANCHORENA 900) ## 172 ESTADOS UNIDOS Y LIMA ## 173 PASTEUR 501 ENTRE TUCUMAN Y LAVALLE ## 174 PLAZA ALEMANIA: DEL LIBERTADOR AV Y CAVIA ## 175 HIPOLITO YRIGOYEN Y 24 DE NOVIEMBRE ## 176 MARCELO T DE ALVEAR 1698 Y RODRIGUEZ PEÑA ## 177 AV. ROLDAN, BELISARIO Y AV. SARMIENTO ## 178 JOSE MARMOL 803 Y ESTADOS UNIDOS ## 179 CASTRO 680 ENTRE MEXICO Y AGRELO ## 180 MEXICO 1652 ENTRE VIRREY CEVALLOS Y SOLIS ## 181 33 ORIENTALES 1439, ENTRE AV. PAVON Y AV. GARAY ## 182 ADOLFO ALSINA 2910 Y CATAMARCA ## 183 TALCAHUANO 1034 Y MARCELO T DE ALVEAR ## 184 ARENALES 2882 Y AGUERO ## 185 PERON, JUAN DOMINGO TTE 3989 ENTRE FRANCISCO ACUÑA DE FIGUEROA Y MEDRANO ## 186 ARANGUREN 188 ENTRE PORTUGAL Y EDUARDO ACEVEDO ## 187 PEDRO ECHAGUE 1878 ENTRE COMBATE DE LOS POZOS Y AV ENTRE RIOS ## 188 POSADAS 1350 ENTRE MONTEVIDEO Y RODRIGUEZ PEÑA ## 189 CHACO 250 ## 190 AV JUAN DE GARAY Y LUIS SAENZ PEÑA ## 191 JUNCAL 3320 Y JERONIMO SALGUERO ## 192 QUINTINO BOCAYUVA Y DON BOSCO ## 193 ESTADOS UNIDOS 3568 ENTRE BOEDO Y MAZA ## 194 CATULO CASTILLO 2896 Y DEAN FUNES ## 195 PI Y MARGALL 750 ENTRE NECOCHEA Y ALTE. BROWN ## 196 AV RIVADAVIA Y PARANA ## 197 ROSETI 50 Y AV DORREGO ## 198 AUSTRIA 2080 ENTRE FRENCH Y JUNCAL ## 199 DON PEDRO DE MENDOZA 1819 ## IMAGEN AUTOMAT ## 1 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 2 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 3 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 4 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 5 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 6 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 7 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 8 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 9 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 10 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 11 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 12 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 13 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 14 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 15 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 16 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 17 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 18 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 19 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 20 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 21 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 22 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 23 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 24 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 25 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 26 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 27 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 28 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 29 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 30 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 31 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 32 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 33 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 34 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 35 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 36 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 37 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 38 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 39 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 40 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 41 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 42 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 43 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 44 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 45 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 46 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 47 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 48 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 49 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 50 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 51 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 52 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 53 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 54 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 55 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 56 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 57 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 58 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 59 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 60 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 61 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 62 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 63 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 64 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 65 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 66 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 67 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 68 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 69 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 70 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 71 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 72 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 73 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 74 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 75 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 76 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 77 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 78 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 79 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 80 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 81 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 82 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 83 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 84 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 85 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 86 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 87 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 88 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 89 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 90 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 91 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 92 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 93 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 94 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 95 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 96 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 97 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 98 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 99 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 100 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 101 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 102 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 103 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 104 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 105 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 106 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 107 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 108 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 109 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 110 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 111 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 112 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 113 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 114 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 115 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 116 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 117 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 118 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 119 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 120 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 121 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 122 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 123 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 124 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 125 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 126 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 127 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 128 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 129 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 130 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 131 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 132 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 133 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 134 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 135 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 136 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 137 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 138 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 139 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 140 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 141 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 142 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 143 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 144 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 145 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 146 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 147 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 148 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 149 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 150 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 151 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 152 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 153 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 154 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 155 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 156 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 157 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 158 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 159 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 160 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 161 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 162 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 163 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 164 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 165 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 166 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 167 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 168 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 169 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 170 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 171 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 172 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 173 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 174 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 175 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 176 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 177 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 178 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 179 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 180 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 181 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 182 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 183 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 184 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 185 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 186 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 187 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 188 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 189 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 190 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 191 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 192 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 193 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 194 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 195 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 196 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 197 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 198 ESTACION_AUTOMATICA.PNG AUTOMATICA ## 199 ESTACION_AUTOMATICA.PNG AUTOMATICA ## OBSERV ## 1 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 2 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 3 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 4 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 5 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 6 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 7 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 8 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 9 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 10 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 11 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 12 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 13 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 14 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 15 NUEVA ESTACION! - SE PASO DE MANUAL A AUTOMATICA EN JUNIO 2015 ## 16 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 17 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 18 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 19 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 20 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 21 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 22 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 23 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 24 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 25 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) - SE MODIFICO EL NOMBRE (EX EMMA DE LA BARRA) ## 26 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 27 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 28 ABRIL 2015 (PASO DE SER MANUAL A AUTOMATICA) ## 29 NUEVA ESTACION! - MAYO 2015 ## 30 NUEVA ESTACION! - ABRIL DE 2015 (SE INCORPORA CON EL SISTEMA AUTOMATICO) ## 31 NUEVA ESTACION! - ABRIL DE 2015 (SE INCORPORA CON EL SISTEMA AUTOMATICO) ## 32 NUEVA ESTACION! - ABRIL DE 2015 (SE INCORPORA CON EL SISTEMA AUTOMATICO) ## 33 NUEVA ESTACION! - ABRIL DE 2015 (SE INCORPORA CON EL SISTEMA AUTOMATICO) ## 34 NUEVA ESTACION! - ABRIL DE 2015 (SE INCORPORA CON EL SISTEMA AUTOMATICO) ## 35 NUEVA ESTACION! - ABRIL DE 2015 (SE INCORPORA CON EL SISTEMA AUTOMATICO) ## 36 NUEVA ESTACION! - JULIO 2015 ## 37 NUEVA ESTACION! - JUNIO 2015 ## 38 NUEVA ESTACION! - JUNIO 2015 ## 39 NUEVA ESTACION! - JUNIO 2015 ## 40 NUEVA ESTACION! - JUNIO 2015 ## 41 jul-15 ## 42 NUEVA ESTACION! - JULIO 2015 ## 43 NUEVA ESTACION! - JULIO 2015 ## 44 NUEVA ESTACION! - JULIO 2015 ## 45 NUEVA ESTACION! - AGOSTO 2015 ## 46 NUEVA ESTACION! - AGOSTO 2015 ## 47 NUEVA ESTACION! - SEPTIEMBRE 2015 ## 48 NUEVA ESTACION! - SEPTIEMBRE 2015 ## 49 NUEVA ESTACION! - SEPTIEMBRE 2015 ## 50 NUEVA ESTACION! - FEBRERO 2016 ## 51 NUEVA ESTACION! - FEBRERO 2016 ## 52 NUEVA ESTACION! - FEBRERO 2016 ## 53 NUEVA ESTACION! - AGOSTO 2015 ## 54 NUEVA ESTACION! - OCTUBRE 2015 ## 55 NUEVA ESTACION! - OCTUBRE 2015 ## 56 NUEVA ESTACION! - ENERO 2016 ## 57 NUEVA ESTACION! - ENERO 2016 ## 58 NUEVA ESTACION! - ENERO 2016 ## 59 NUEVA ESTACION! - ENERO 2016 ## 60 NUEVA ESTACION! - FEBRERO 2016 (ANTES FIGURABA CON NOMBRE &quot;LIBERTAD&quot;) ## 61 NUEVA ESTACION! - FEBRERO 2016 ## 62 NUEVA ESTACION! - FEBRERO 2016 ## 63 NUEVA ESTACION! - FEBRERO 2016 ## 64 NUEVA ESTACION! - FEBRERO 2016 ## 65 NUEVA ESTACION! - FEBRERO 2016 ## 66 NUEVA ESTACION: 29/02/2016 ## 67 NUEVA ESTACION: 29/02/2016 ## 68 jun-16 ## 69 jun-16 ## 70 nov-16 ## 71 jul-16 ## 72 jun-16 ## 73 jul-16 ## 74 nov-16 ## 75 jun-16 ## 76 ene-16 ## 77 jun-16 ## 78 jun-16 ## 79 jul-16 ## 80 nov-16 ## 81 ago-16 ## 82 AGOSTO DE 2016 ## 83 AGOSTO 2016 - EN JULIO DE 2017 CAMBIO SU NOMBRE Y UBICACION. ANTES ERA &quot;ARROYO&quot; ## 84 ago-16 ## 85 ago-16 ## 86 NUEVA! SEPTIEMBRE 2016 ## 87 NUEVA! SEPTIEMBRE 2016 ## 88 NUEVA! SEPTIEMBRE 2016 ## 89 sep-16 ## 90 INAUGURADA 3/10/2016 ## 91 dic-16 ## 92 dic-16 ## 93 dic-16 ## 94 dic-16 ## 95 dic-16 ## 96 dic-16 ## 97 dic-16 ## 98 dic-16 ## 99 dic-16 ## 100 ene-17 ## 101 ene-17 ## 102 ene-17 ## 103 ene-17 ## 104 ene-17 ## 105 ene-17 ## 106 feb-17 ## 107 feb-17 ## 108 feb-17 ## 109 feb-17 ## 110 feb-17 ## 111 feb-17 ## 112 feb-17 ## 113 feb-17 ## 114 feb-17 ## 115 feb-17 ## 116 mar-17 ## 117 mar-17 ## 118 mar-17 ## 119 mar-17 ## 120 mar-17 ## 121 mar-17 ## 122 mar-17 ## 123 mar-17 ## 124 mar-17 ## 125 mar-17 ## 126 mar-17 ## 127 mar-17 ## 128 mar-17 ## 129 mar-17 ## 130 mar-17 ## 131 mar-17 ## 132 mar-17 ## 133 abr-17 ## 134 abr-17 ## 135 abr-17 ## 136 abr-17 ## 137 abr-17 ## 138 abr-17 ## 139 abr-17 ## 140 abr-17 ## 141 abr-17 ## 142 abr-17 ## 143 abr-17 ## 144 abr-17 ## 145 abr-17 ## 146 abr-17 ## 147 abr-17 ## 148 abr-17 ## 149 may-17 ## 150 may-17 ## 151 may-17 ## 152 may-17 ## 153 may-17 ## 154 may-17 ## 155 may-17 ## 156 may-17 ## 157 may-17 ## 158 may-17 ## 159 may-17 ## 160 may-17 ## 161 may-17 ## 162 may-17 ## 163 may-17 ## 164 may-17 ## 165 jun-17 ## 166 jun-17 ## 167 jun-17 ## 168 jun-17 ## 169 jun-17 ## 170 jun-17 ## 171 jun-17 ## 172 jun-17 ## 173 jun-17 ## 174 jun-17 ## 175 jul-17 ## 176 jul-17 ## 177 jul-17 ## 178 jul-17 ## 179 jul-17 ## 180 jul-17 ## 181 jul-17 ## 182 jul-17 ## 183 jul-17 ## 184 jul-17 ## 185 jul-17 ## 186 ago-17 ## 187 ago-17 ## 188 ago-17 ## 189 ago-17 ## 190 ago-17 ## 191 ago-17 ## 192 ago-17 ## 193 ago-17 ## 194 ago-17 ## 195 ago-17 ## 196 ago-17 ## 197 sep-17 ## 198 sep-17 ## 199 INAUGURACION 05/12/2017 ## NRO_EST HORARIO ## 1 1 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 2 2 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 3 3 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 4 4 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 5 6 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 6 5 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 7 7 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 8 8 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 9 9 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 10 10 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 11 11 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 12 12 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 13 13 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 14 14 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 15 43 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 16 16 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 17 17 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 18 18 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 19 19 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 20 20 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 21 22 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 22 23 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 23 24 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 24 25 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 25 26 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 26 27 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 27 28 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 28 29 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 29 21 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 30 30 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 31 32 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 32 35 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 33 36 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 34 37 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 35 38 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 36 41 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 37 33 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 38 34 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 39 40 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 40 44 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 41 51 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 42 46 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 43 62 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 44 53 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 45 42 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 46 60 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 47 68 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 48 57 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 49 52 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 50 82 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 51 59 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 52 65 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 53 48 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 54 58 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 55 56 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 56 76 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 57 64 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 58 31 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 59 94 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 60 71 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 61 74 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 62 47 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 63 61 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 64 95 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 65 69 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 66 72 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 67 63 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 68 99 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 69 96 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 70 121 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 71 91 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 72 81 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 73 98 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 74 114 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 75 84 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 76 85 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 77 66 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 78 70 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 79 55 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 80 115 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 81 50 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 82 88 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 83 78 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 84 80 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 85 67 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 86 87 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 87 97 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 88 49 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 89 86 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 90 166 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 91 79 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 92 150 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 93 118 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 94 106 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 95 92 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 96 77 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 97 75 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 98 120 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 99 151 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 100 136 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 101 101 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 102 108 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 103 134 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 104 152 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 105 161 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 106 45 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 107 112 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 108 119 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 109 128 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 110 132 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 111 135 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 112 149 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 113 154 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 114 164 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 115 175 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 116 105 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 117 54 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 118 100 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 119 110 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 120 122 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 121 109 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 122 90 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 123 144 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 124 113 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 125 129 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 126 167 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 127 123 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 128 124 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 129 139 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 130 140 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 131 176 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 132 89 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 133 126 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 134 104 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 135 73 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 136 191 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 137 173 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 138 145 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 139 181 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 140 158 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 141 153 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 142 83 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 143 172 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 144 146 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 145 93 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 146 111 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 147 103 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 148 160 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 149 182 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 150 138 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 151 130 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 152 131 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 153 107 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 154 133 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 155 143 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 156 137 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 157 125 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 158 117 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 159 116 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 160 141 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 161 127 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 162 142 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 163 147 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 164 148 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 165 155 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 166 163 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 167 157 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 168 159 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 169 162 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 170 170 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 171 165 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 172 168 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 173 171 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 174 156 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 175 169 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 176 174 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 177 177 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 178 178 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 179 180 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 180 183 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 181 185 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 182 186 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 183 192 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 184 193 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 185 194 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 186 188 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 187 184 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 188 189 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 189 187 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 190 195 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 191 190 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 192 197 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 193 199 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 194 198 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 195 196 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 196 39 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 197 102 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 198 200 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## 199 179 ESTACION AUTOMATICA: DISPONIBILIDAD LAS 24 HORAS ## DIRE_NORM ## 1 FIGUEROA ALCORTA, PRES. AV. Y BIBILONI, JUAN A. ## 2 DEL LIBERTADOR AV. Y RAMOS MEJIA, JOSE MARIA, DR. AV. ## 3 HUERGO, ING. AV. Y BELGRANO AV. ## 4 LAVALLE Y BOUCHARD ## 5 GARCIA, MARTIN AV. E IRALA ## 6 SARMIENTO AV. Y CALZADA CIRCULAR PLAZA ITALIA ## 7 PELLEGRINI, CARLOS Y PERON, JUAN DOMINGO, TTE. GENERAL ## 8 YRIGOYEN, HIPOLITO AV. Y CEVALLOS, VIRREY ## 9 DIAZ, CNEL. AV. Y FRENCH ## 10 1500 MOREAU DE JUSTO, ALICIA AV. ## 11 651 TALCAHUANO ## 12 PARANA Y JUNCAL ## 13 RIVADAVIA AV. Y PUEYRREDON AV. ## 14 580 BULLRICH, INT. AV. ## 15 CORDOBA AV. Y URIBURU JOSE E., PRES. ## 16 PERU Y ROCA, JULIO A., PRESIDENTE AV. ## 17 BULNES Y PERON, JUAN DOMINGO, TTE. GENERAL ## 18 INDEPENDENCIA AV. Y 9 DE JULIO AV. ## 19 750 SANTA FE AV. ## 20 1 ZAPIOLA ## 21 ARENALES Y CERRITO ## 22 691 SUIPACHA ## 23 ALSINA, ADOLFO E IRIGOYEN, BERNARDO DE ## 24 SALGUERO, JERONIMO Y MANSILLA, LUCIO NORBERTO, GENERAL ## 25 DE LA BARRA, EMMA Y MANSO JUANA ## 26 CORDOBA AV. Y MONTEVIDEO ## 27 CALVO, CARLOS Y LINIERS VIRREY ## 28 PATRICIAS ARGENTINAS AV. Y FINLAY, CARLOS J. AV. ## 29 IGUAZU Y USPALLATA ## 30 AZCUENAGA Y PEÑA ## 31 SAN MARTIN Y RIVADAVIA AV. ## 32 BUTTY, E., ING. Y ALEM, LEANDRO N. AV. ## 33 MAIPU Y SARMIENTO ## 34 ESMERALDA Y RIVADAVIA AV. ## 35 CERRITO Y ALVEAR, MARCELO T. DE ## 36 URQUIZA, GRAL. Y RONDEAU ## 37 URIBURU JOSE E. Y ALVEAR MARCELO T DE ## 38 710 SAN MARTIN ## 39 481 SARMIENTO ## 40 AV DEL LIBERTADOR Y AV SARMIENTO ## 41 TUCUMAN Y CERRITO ## 42 726 PERU ## 43 820 MAIPU ## 44 1031 SAN MARTIN ## 45 SAENZ PEÑA ROQUE AV Y SUIPACHA ## 46 25 DE MAYO Y LAVALLE ## 47 175 RIVAROLA RODOLFO DR ## 48 482 BALCARCE ## 49 SANCHEZ DE BUSTAMANTE Y PERON JUAN D ## 50 RAWSON Y DIAZ VELEZ AV ## 51 3328 GUEMES ## 52 3822 GUEMES ## 53 PERON JUAN D Y RECONQUISTA ## 54 5327 SANTA FE AV ## 55 COSTA RICA Y MALABIA ## 56 AYACUCHO Y PERON JUAN D ## 57 RIOBAMBA Y JUNCAL ## 58 PADILLA Y WARNES AV ## 59 GUZMAN Y LEIVA ## 60 1149 SAENZ PEÑA ROQUE AV ## 61 401 PATRICIAS ARGENTINAS AV ## 62 251 BOLIVAR ## 63 101 BALCARCE ## 64 510 ESMERALDA ## 65 ECUADOR Y MANSILLA LUCIO NORBERTO ## 66 490 PERU ## 67 716 RECONQUISTA ## 68 780 MALABIA ## 69 3302 GUARDIA VIEJA ## 70 925 YATAY ## 71 708 PASCO ## 72 683 BALCARCE ## 73 834 MORENO ## 74 297 DELLA PAOLERA CARLOS M ## 75 595 AYACUCHO ## 76 AGUERO Y MANSILLA ## 77 3508 DE LA CARCOVA ## 78 1413 ARAOZ ## 79 101 VIAMONTE ## 80 600 QUINTANA MANUEL ## 81 2516 PEREYRA LUCENA ## 82 MISIONES Y ALSINA ADOLFO ## 83 ARROYO Y SUIPACHA ## 84 608 DOBLAS ## 85 1905 SENILLOSA ## 86 213 GUAYAQUIL ## 87 499 DIAZ AVELINO ## 88 4101 CONSTITUCION ## 89 1027 SAAVDREA ## 90 2050 LOPEZ VICENTE ## 91 VILLAFLOR AZUCENA Y DEALESSI PIERINA ## 92 ROSARIO VERA PEÑALOZA Y OLGA COSSETINI ## 93 MEXICO Y SAAVEDRA ## 94 2091 REPUBLICA BOLIVARIANA DE VENEZUELA ## 95 2908 SALCEDO ## 96 SARANDI E YRIGOYEN HIPOLITO AV ## 97 PICHINCHA Y ALSINA ADOLFO ## 98 URQUIZA GRAL Y AGRELO ## 99 553 VILLAFLOR AZUCENA ## 100 ACEVEDO Y PADILLA ## 101 1092 FITZ ROY ## 102 CAFFARENA AGUSTIN Y DON PEDRO DE MENDOZA ## 103 DON BOSCO Y LINIERS VIRREY ## 104 VERA PEÑALOZA ROSARIO Y LANTERI JULIETA ## 105 3918 HUMAHUACA ## 106 TUCUMAN Y URUGUAY ## 107 9 DE JULIO AV Y MORENO ## 108 LARREA Y PACHECO DE MELO JOSE ## 109 MADERO EDUARDO AV Y PERON JUAN D ## 110 CORRIENTES AV Y SAN MARTIN ## 111 ALVEAR MARCELO T Y SUIPACHA ## 112 LIMA Y MEXICO ## 113 GALLO Y TUCUMAN ## 114 ESTADOS UNIDOS Y AZOPARDO ## 115 ESMERALDA Y CORRIENTES AV ## 116 2687 15 DE NOVIEMBRE DE 1889 ## 117 LAVALLE Y ACUÑA DE FIGUEROA FRANCISCO ## 118 815 CASTILLO ## 119 3606 GUARDIA VIEJA ## 120 4090 COSTA RICA ## 121 185 LERMA ## 122 GUTIERREZ JUAN MARIA Y AGUERO ## 123 BOULOGNE SUR MER Y TUCUMAN ## 124 4799 GUATEMALA ## 125 285 VELASCO RAMIREZ DE JUAN ## 126 YRIGOYEN HIPOLITO AV Y LA PLATA AV ## 127 2393 ARMENIA ## 128 UGARTECHE Y CABELLO ## 129 3401 SALCEDO ## 130 3587 LAS CASAS ## 131 469 PINZON ## 132 CABELLO Y DIAZ CNEL AV ## 133 REGIMIENTO DE PATRICIOS AV Y ARAOZ DE LAMADRID GREGORIO ## 134 6900 CORRIENTES AV ## 135 RUY DIAZ DE GUZMAN Y GARCIA MARTIN AV ## 136 RIVADAVIA AV Y PELLEGRINI CARLOS ## 137 632 SAN JUAN AV ## 138 1883 RAVIGNANI EMILIO DR ## 139 1853 BILLINGHURST ## 140 VILLARROEL Y HUMBOLDT ## 141 383 BLANES JUAN MANUEL ## 142 LAVALLE Y PARANA ## 143 BRASIL AV Y DEFENSA ## 144 CALVO CARLOS Y LA RIOJA ## 145 CALVO CARLOS Y SARANDI ## 146 GUEMES MACACHA Y MANSO JUANA ## 147 FIGUEROA ALCORTA, PRES. AV. Y SAN MARTIN DE TOURS ## 148 3291 GODOY CRUZ ## 149 2171 RAVIGNANI ## 150 PERDRIEL Y FINOCHIETTO ENRIQUE DR. ## 151 DEL LIBERTADOR AV Y RAMOS MEJIA DR AV ## 152 DEL LIBERTADOR AV Y RAMOS MEJIA DR AV ## 153 BRASIL AV Y PICHINCHA AV ## 154 5690 NICARAGUA ## 155 455 BILLINGHURST ## 156 AZOPARDO Y CHILE ## 157 FRAY JUSTO SANTAMARIA DE ORO Y GUATEMALA ## 158 1016 PERU ## 159 BERUTI Y ECUADOR ## 160 225 SOLIS ## 161 4380 DUMONT SANTOS ## 162 1525 ARMENIA ## 163 1050 BRASIL AV ## 164 1060 BRASIL AV ## 165 300 ALMAFUERTE AV. ## 166 MITRE BARTOLOME Y PUEYRREDON AV ## 167 989 SENILLOSA ## 168 1590 FITZ ROY ## 169 LARREA Y MITRE BARTOLOME ## 170 2862 SAN LUIS ## 171 901 ANCHORENA TOMAS MANUEL ## 172 ESTADOS UNIDOS Y LIMA ## 173 501 PASTEUR ## 174 DEL LIBERTADOR AV Y CAVIA ## 175 YRIGOYEN HIPOLITO Y 24 DE NOVIEMBRE ## 176 1698 ALVEAR MARCELO T DE ## 177 ROLDAN BELISARIO AV Y SARMIENTO AV ## 178 803 MARMOL JOSE ## 179 680 CASTRO ## 180 1652 MEXICO ## 181 1439 TREINTA Y TRES ORIENTALES ## 182 2910 ALSINA ADOLFO ## 183 1034 TALCAHUANO ## 184 2882 ARENALES ## 185 3989 PERON JUAN DOMINGO TTE ## 186 188 ARANGUREN JUAN F DR ## 187 1878 ECHAGUE PEDRO ## 188 1350 POSADAS ## 189 250 CHACO ## 190 GARAY JUAN DE AV Y SAENZ PEÑA LUIS PRES ## 191 3320 JUNCAL ## 192 BOCAYUVA QUINTINO Y DON BOSCO ## 193 3568 ESTADOS UNIDOS ## 194 2896 CASTILLO CATULO ## 195 750 PI Y MARGALL ## 196 RIVADAVIA AV Y PARANA ## 197 50 ROSETI ## 198 2080 AUSTRIA ## 199 DON PEDRO DE MENDOZA AV 1819 Ahora, las visualizamos. Como preparativo obtenemos una “bounding box”, la caja de coordenadas que contiene todos los puntos: bbox &lt;- make_bbox(estaciones$X, estaciones$Y) bbox ## left bottom right top ## -58.46000 -34.64541 -58.35132 -34.56439 Ahora descargamos un mapa que abarca el rectángulo de nuestra bounding box mapa_base &lt;- get_stamenmap(bbox, color = &quot;bw&quot;, zoom = 12) ggmap(mapa_base) + geom_point(data = estaciones, aes(x = X, y = Y), color = &quot;limegreen&quot;) Podemos ver que las estaciones del sistema se concentran en el centro económico de la ciudad y sus zonas aledañas. No tenemos un campo con la fecha de inauguración que nos permita saber el orden en que se desplegaron las estaciones, pero podemos usar el número que les fue asignado (asumiendo que respetan un orden cronológico) para aproximarlo: ggmap(mapa_base) + geom_point(data = estaciones, aes(x = X, y = Y, color = NRO_EST)) + scale_color_distiller(type = &quot;div&quot;) Si el número de estación refleja la antigüedad, pareciera que primero de desplegó un corredor desde el downtown hacia el noroeste, que luego se fue complementando con expansión radial. 6.2 Cuantificando interacción A partir de ahora, agreguemos theme_nothing() para retirar todos los componentes auxiliares (como escalas y leyendas) y quedarnos solo con el mapa. ggmap(mapa_base) + geom_point(data = estaciones, aes(x = X, y = Y), color = &quot;limegreen&quot;, size = 2) + theme_nothing() A continuación, realizamos un conteo de trayectos entre pares de estaciones conteo &lt;- viajes %&gt;% group_by(ORIGEN_ESTACION, DESTINO_ESTACION) %&gt;% summarise(total = sum(TOTAL)) Podemos evaluar el grado de interconexión haciendo un heatmap, un mapa de calor que muestre la cantidad de viajes entre pares de estaciones. Hacemos uso de geom_tile() una geometría de ggplot() que genera rectángulos. ggplot() + geom_tile(data = conteo, aes(x = ORIGEN_ESTACION, y = DESTINO_ESTACION, fill = total)) + scale_fill_distiller(palette = &quot;Spectral&quot;) El gráfico revela una característica de los datos: la numeración de la estaciones es discontinua. Crece secuencialmente hasta casi 200, pero por alguna hay un par de estaciones numeradas por encima de 500. Lo verificamos: unique(conteo$ORIGEN_ESTACION) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 ## [19] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ## [37] 38 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 ## [55] 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 73 74 75 ## [73] 76 77 79 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 ## [91] 96 98 99 100 101 103 104 105 106 108 109 110 111 112 113 114 115 118 ## [109] 119 120 121 122 123 124 126 128 129 132 134 135 136 138 139 140 144 145 ## [127] 146 149 150 151 152 153 154 158 160 161 164 166 167 172 173 175 176 181 ## [145] 191 502 505 Podemos evitar el hueco que aparece en el mapa de calor tratando a las estaciones como una variable categórica (un factor) en lugar de numérica ggplot() + geom_tile(data = conteo, aes(x = as.factor(ORIGEN_ESTACION), y = as.factor(DESTINO_ESTACION), fill = total)) + scale_fill_distiller(palette = &quot;Spectral&quot;) La visualización es difícil de leer, pero aún así revela patrones. El tipo de viaje más popular es el de tomar y dejar la bicicleta en la misma estación, sugiriendo la prevalencia del uso recreativo. La interacción entre estaciones más alta se da entre las que tienen los primeros números, que como hemos visto se localizan en el centro de la ciudad. Las cantidad de combinaciones posibles crece rapidísimo con el número de nodos, por eso las interacción en redes grandes es difícil de visualizar. Para continuar, tomemos sólo los 10 trayectos más frecuentes, descartando los viajes “circulares” (con el mismo origen y destino): top10 &lt;- conteo %&gt;% ungroup() %&gt;% filter(ORIGEN_ESTACION != DESTINO_ESTACION) %&gt;% top_n(10) top10 ## # A tibble: 10 x 3 ## ORIGEN_ESTACION DESTINO_ESTACION total ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 333 ## 2 1 44 146 ## 3 2 1 311 ## 4 2 10 181 ## 5 2 164 115 ## 6 9 44 121 ## 7 10 2 182 ## 8 30 9 118 ## 9 44 1 176 ## 10 44 14 127 ggplot() + geom_tile(data = top10, aes(x = as.factor(ORIGEN_ESTACION), y = as.factor(DESTINO_ESTACION), fill = total)) + scale_fill_distiller(palette = &quot;Spectral&quot;) Como se vislumbra en el heatmap completo, la interacción entre las estaciones 1 y 2 es con diferencia la más frecuente. 6.3 Estimando rutas Para trazar los trayectos de los usuarios al viajar de una estación a otra, no tendría sentido tender líneas rectas entre origen y destino. Para visualizar el tránsito, necesitamos tener en cuenta la ubicación de las calles y la dirección de tráfico que permiten. Lo ideal sería poder representar la ruta exacta de cada trayecto, sabiendo cuáles fueron las calles transitadas para realizar el viaje. Cuando no disponemos de información con ese nivel de detalle, lo que podemos hacer es estimar los recorridos utilizando un servicio de ruteo como el de Google Maps, o el del proyecto OSRM. En R contamos con paquetes especializados para conectar con estos servicios y trabajar con información de ruteo. El paquete googleway() permite conectar R con la API de Google Maps, y osrm hace lo propio con OSRM. Vamos con OSRM. Si no tenemos el paquete necesario, lo instalamos. install.packages(&quot;osrm&quot;) Y lo activamos: library(osrm) Para poder recibir información de ruteo desde los servidores de Google, la compañía exige el uso de una API key, una clave de autorización. Tal como con Twitter, el proceso de adquirir una clave es instantáneo, pero desde mediados de 2018 Google entrega API key sólo a usuarios que brinden información de una tarjeta de crédito, para cobrar el uso que supere ciertos umbrales. Para quienes deseen hacer uso de las múltiples funciones que Google ofrece a través de sus APIs, la molestia vale la pena, y puede seguir éstos pasos: https://developers.google.com/maps/documentation/directions/get-api-key. Para resolver el problema del ejercicio, nosotros optaremos por el ruteo vía OSRM que no requiere permiso ni tarjetas de crédito. Para encontrar una ruta, usamos la función osrmRoute, que requiere origen y destino en forma de vectores conteniendo un identificador (nombre del lugar o posición), longitud y latitud. Por ejemplo, para rutear entre dos lugares en Buenos Aires como Parque centenario y la estación Retiro: pcentenario &lt;- c(nombre = &quot;Parque Centenario&quot;, lon = -58.435609, lat = -34.606411) eretiro &lt;- c(nombre = &quot;Estación Retiro&quot;, lon = -58.374873, lat = -34.591394) centenario_a_retiro &lt;- osrmRoute(src = pcentenario, dst = eretiro, returnclass = &quot;sf&quot;, overview = &quot;full&quot;) La opción returnclass = &quot;sf&quot; permite obtener un dataframe espacial como resultado, que podemos proyectar luego sobre un mapa. overview = &quot;full&quot; hace que osrmRoute calcule la ruta precisa (con posiciones exactas) en lugar de un aproximado; de nuevo, solicitamos esto para luego poder visualizar el camino exacto en un mapa. osrmRoute también estima la duración (en minutos) y la distancia (en kilómetros) del trayecto, como se ve en los campos “duration” y “distance”: centenario_a_retiro ## Simple feature collection with 1 feature and 4 fields ## geometry type: LINESTRING ## dimension: XY ## bbox: xmin: -58.4355 ymin: -34.60568 xmax: -58.37324 ymax: -34.57317 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## src dst duration ## Parque Centenario_Estación Retiro Parque Centenario Estación Retiro 30.45 ## distance geometry ## Parque Centenario_Estación Retiro 9.0613 LINESTRING (-58.4355 -34.60... Podemos revisar rápidamente la ruta hallada usando leaflet: library(leaflet) leaflet(centenario_a_retiro) %&gt;% addTiles() %&gt;% addPolylines(color = &quot;red&quot;) Ahora, lo intentamos con los datos de viajes en bicicleta. Hacemos un join del dataframe con el conteo de viajes contra el de posición de estaciones, para agregar las coordenadas. De origen: top10 &lt;- top10 %&gt;% left_join(estaciones[c(&quot;X&quot;, &quot;Y&quot;, &quot;NOMBRE&quot;, &quot;NRO_EST&quot;)], by = c(&quot;ORIGEN_ESTACION&quot; = &quot;NRO_EST&quot;)) %&gt;% rename(ORIGEN_X = X, ORIGEN_Y = Y, ORIGEN_NOMBRE = NOMBRE) top10 ## # A tibble: 10 x 6 ## ORIGEN_ESTACION DESTINO_ESTACION total ORIGEN_X ORIGEN_Y ORIGEN_NOMBRE ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 1 2 333 -58.4 -34.6 FACULTAD DE DERECHO ## 2 1 44 146 -58.4 -34.6 FACULTAD DE DERECHO ## 3 2 1 311 -58.4 -34.6 RETIRO ## 4 2 10 181 -58.4 -34.6 RETIRO ## 5 2 164 115 -58.4 -34.6 RETIRO ## 6 9 44 121 -58.4 -34.6 PARQUE LAS HERAS ## 7 10 2 182 -58.4 -34.6 PUERTO MADERO - UCA ## 8 30 9 118 -58.4 -34.6 PEÑA ## 9 44 1 176 -58.4 -34.6 ZOOLOGICO ## 10 44 14 127 -58.4 -34.6 ZOOLOGICO Y además las de destino: top10 &lt;- top10 %&gt;% left_join(estaciones[c(&quot;X&quot;, &quot;Y&quot;, &quot;NOMBRE&quot;, &quot;NRO_EST&quot;)], by = c(&quot;DESTINO_ESTACION&quot; = &quot;NRO_EST&quot;)) %&gt;% rename(DESTINO_X = X, DESTINO_Y = Y, DESTINO_NOMBRE = NOMBRE) top10 ## # A tibble: 10 x 9 ## ORIGEN_ESTACION DESTINO_ESTACION total ORIGEN_X ORIGEN_Y ORIGEN_NOMBRE ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 1 2 333 -58.4 -34.6 FACULTAD DE … ## 2 1 44 146 -58.4 -34.6 FACULTAD DE … ## 3 2 1 311 -58.4 -34.6 RETIRO ## 4 2 10 181 -58.4 -34.6 RETIRO ## 5 2 164 115 -58.4 -34.6 RETIRO ## 6 9 44 121 -58.4 -34.6 PARQUE LAS H… ## 7 10 2 182 -58.4 -34.6 PUERTO MADER… ## 8 30 9 118 -58.4 -34.6 PEÑA ## 9 44 1 176 -58.4 -34.6 ZOOLOGICO ## 10 44 14 127 -58.4 -34.6 ZOOLOGICO ## # … with 3 more variables: DESTINO_X &lt;dbl&gt;, DESTINO_Y &lt;dbl&gt;, ## # DESTINO_NOMBRE &lt;fct&gt; Probemos rutear el trayecto más popular, el de Facultad de Derecho a Retiro: viaje &lt;- top10[1,] fderecho_a_retiro &lt;- osrmRoute(src = c(viaje$ORIGEN_NOMBRE, viaje$ORIGEN_X, viaje$ORIGEN_Y), dst = c(viaje$DESTINO_NOMBRE, viaje$DESTINO_X, viaje$DESTINO_Y), returnclass = &quot;sf&quot;, overview = &quot;full&quot;) fderecho_a_retiro ## Simple feature collection with 1 feature and 4 fields ## geometry type: LINESTRING ## dimension: XY ## bbox: xmin: -58.40488 ymin: -34.59253 xmax: -58.37324 ymax: -34.57317 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## src dst duration distance geometry ## 59_162 59 162 15.51667 5.4226 LINESTRING (-58.39256 -34.5... leaflet(fderecho_a_retiro) %&gt;% addTiles() %&gt;% addPolylines(color = &quot;red&quot;) Si queremos ver el trayecto en un mapa estático, podemos usar ggmap() con geom_sf(): ggmap(mapa_base) + geom_point(data = estaciones, aes(x = X, y = Y), color = &quot;limegreen&quot;, size = 2) + geom_sf(data = fderecho_a_retiro, color = &quot;red&quot;, inherit.aes = FALSE) + theme_nothing() Calcular todos los recorridos y juntarlos en un sólo dataframe puede ser muy fácil o bastante engorroso, dependiendo de cuanta práctica tengamos en la automatización de tareas repetitivas. Por lo pronto, podemos descargar un dataset ya calculado con los recorridos detallados entre todas las estaciones de nuestro top 10: recorridos &lt;- st_read(&quot;https://bitsandbricks.github.io/data/recorridos_BA_bici.geojson&quot;) ## Reading layer `recorridos_BA_bici&#39; from data source `https://bitsandbricks.github.io/data/recorridos_BA_bici.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 10 features and 6 fields ## geometry type: LINESTRING ## dimension: XY ## bbox: xmin: -58.42635 ymin: -34.62158 xmax: -58.36573 ymax: -34.5627 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs recorridos ## Simple feature collection with 10 features and 6 fields ## geometry type: LINESTRING ## dimension: XY ## bbox: xmin: -58.42635 ymin: -34.62158 xmax: -58.36573 ymax: -34.5627 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## ORIGEN_ESTACION DESTINO_ESTACION src dst duration distance ## 1 1 2 1 2 16.005000 5.4228 ## 2 1 44 1 44 6.741667 2.7496 ## 3 2 1 2 1 7.198333 2.3073 ## 4 2 10 2 10 10.708333 3.8060 ## 5 2 164 2 164 11.688333 4.3380 ## 6 9 44 9 44 8.775000 2.8171 ## 7 10 2 10 2 11.023333 3.4170 ## 8 30 9 30 9 7.986667 2.0258 ## 9 44 1 44 1 13.831667 7.8749 ## 10 44 14 44 14 8.278333 2.4001 ## geometry ## 1 LINESTRING (-58.39256 -34.5... ## 2 LINESTRING (-58.39256 -34.5... ## 3 LINESTRING (-58.37493 -34.5... ## 4 LINESTRING (-58.37493 -34.5... ## 5 LINESTRING (-58.37493 -34.5... ## 6 LINESTRING (-58.40661 -34.5... ## 7 LINESTRING (-58.36598 -34.6... ## 8 LINESTRING (-58.39733 -34.5... ## 9 LINESTRING (-58.41484 -34.5... ## 10 LINESTRING (-58.41484 -34.5... Los que quieran espiar un método para compilar los recorrido por su cuenta, puede verlo al final del documento. Para poder asignar un color a cada recorrido, creamos un identificador único para diferenciarlos recorridos &lt;- recorridos %&gt;% mutate(ID = paste(ORIGEN_ESTACION, &quot;-&quot;, DESTINO_ESTACION)) Y ahora, al mapa: ggmap(mapa_base) + geom_sf(data = recorridos, aes(color = ID), inherit.aes = FALSE) + theme_nothing() Si queremos que el grosor de la línea represente la cantidad de veces que se realizó cada recorrido, primero agregamos la cantidad de viajes por recorrido, mediante el cruce con los datos que calculamos en “conteo”: recorridos &lt;- recorridos %&gt;% left_join(conteo) Y luego los usamos en el mapa: ggmap(mapa_base) + geom_sf(data = recorridos, aes(color = ID, size = total), alpha = 0.7, inherit.aes = FALSE) + theme_nothing() También podemos usar el color para indicar el volumen de viajes: ggmap(mapa_base, darken = 0.7) + geom_sf(data = recorridos, aes(color = total, group = ID), inherit.aes = FALSE, alpha = 0.7, size = 1.5) + scale_color_viridis_c(option = &quot;inferno&quot;) + theme_nothing() 6.4 EXTRA: Cómo obtener las rutas de todos los recorridos Tras leer el capítulo de 21 de R for Data Science, “iteration”, ésto debería tener sentido: obtener_recorrido &lt;- function(o_nombre, o_x, o_y, d_nombre, d_x, d_y) { ruta &lt;- osrmRoute(src = c(o_nombre, o_x, o_y), dst = c(d_nombre, d_x, d_y), returnclass = &quot;sf&quot;) cbind(ORIGEN_ESTACION = o_nombre, DESTINO_ESTACION = d_nombre, ruta) } argumentos &lt;- list(top10$ORIGEN_ESTACION, top10$ORIGEN_X, top10$ORIGEN_Y, top10$DESTINO_ESTACION, top10$DESTINO_X, top10$DESTINO_Y) recorridos &lt;- pmap(argumentos, obtener_recorrido) recorridos &lt;- reduce(recorridos, rbind) recorridos ## Simple feature collection with 10 features and 8 fields ## geometry type: LINESTRING ## dimension: XY ## bbox: xmin: -58.42635 ymin: -34.62158 xmax: -58.36573 ymax: -34.5627 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## ORIGEN_ESTACION DESTINO_ESTACION src dst duration distance ID total ## 1 1 2 1 2 16.005000 5.4228 1 - 2 333 ## 2 1 44 1 44 6.741667 2.7496 1 - 44 146 ## 3 2 1 2 1 7.198333 2.3073 2 - 1 311 ## 4 2 10 2 10 10.708333 3.8060 2 - 10 181 ## 5 2 164 2 164 11.688333 4.3380 2 - 164 115 ## 6 9 44 9 44 8.775000 2.8171 9 - 44 121 ## 7 10 2 10 2 11.023333 3.4170 10 - 2 182 ## 8 30 9 30 9 7.986667 2.0258 30 - 9 118 ## 9 44 1 44 1 13.831667 7.8749 44 - 1 176 ## 10 44 14 44 14 8.278333 2.4001 44 - 14 127 ## geometry ## 1 LINESTRING (-58.39256 -34.5... ## 2 LINESTRING (-58.39256 -34.5... ## 3 LINESTRING (-58.37493 -34.5... ## 4 LINESTRING (-58.37493 -34.5... ## 5 LINESTRING (-58.37493 -34.5... ## 6 LINESTRING (-58.40661 -34.5... ## 7 LINESTRING (-58.36598 -34.6... ## 8 LINESTRING (-58.39733 -34.5... ## 9 LINESTRING (-58.41484 -34.5... ## 10 LINESTRING (-58.41484 -34.5... "],
["machine-learning-en-una-aplicación-urbana.html", "Capítulo 7 Machine Learning (en una aplicación urbana) 7.1 Paso 0: Cargar paquetes 7.2 Paso 1: Cargar los datos 7.3 Paso 2: Examinar los datos 7.4 Paso 3: Limpiar los datos 7.5 Paso 4: Crear sets de entrenamiento y de testeo", " Capítulo 7 Machine Learning (en una aplicación urbana) El así llamado machine learning consiste el empleo de aprendizaje estadístico automatizado para identificar patrones en grandes volúmenes de datos. El machine learning (de aquí en más ML) es utilizado en infinidad de campos debido a su creciente facilidad de uso y capacidad -en ciertos contextos- para predecir resultados con alta precisión. A continuación veremos como se aplica ML para predecir el valor de venta de los departamentos en CABA a partir de un dataset publicado en el portal de datos abiertos BA Data que contiene el relevamiento de departamentos en venta que realizó el GCBA en 2016. El objetivo del ejercicio es predecir el valor del metro cuadrado (USD x m2) de los departamentos en función de atributos como la cantidad de m2 descubiertos, la cantidad de ambientes, el barrio donde se ubican, la antiguedad de la construcción, etc. Allá vamos. 7.1 Paso 0: Cargar paquetes Además de las funciones de R “base”, vamos a usar las del paquete tidyverse para procesar y visualizar nuestros datos, las de sf para hacer algunos análisis espaciales y las de randomForest, para aplicar el algoritmo de ML homónimo, que es relativamente simple y a la vez efectivo. library(tidyverse) library(sf) #install.packages(&quot;randomForest&quot;) library(randomForest) 7.2 Paso 1: Cargar los datos Descargamos de BA Data el dataset del relevamiento de departamentos en venta del siguiente modo: dptos_2016 &lt;- read.csv(&quot;http://cdn.buenosaires.gob.ar/datosabiertos/datasets/departamentos-en-venta/departamentos-en-venta-2016.csv&quot;, encoding=&quot;UTF-8&quot;, sep=&quot;;&quot;) 7.3 Paso 2: Examinar los datos Echamos un vistazo a los nombres de las columnas y las primeras filas del dataset: names(dptos_2016) ## [1] &quot;CALLE&quot; &quot;NUMERO&quot; ## [3] &quot;ID_ZONAPRO&quot; &quot;OPERACION&quot; ## [5] &quot;TIPO&quot; &quot;M2&quot; ## [7] &quot;M2CUB&quot; &quot;PRECIOTEXT&quot; ## [9] &quot;PRECIOARS&quot; &quot;PRECIOARSM&quot; ## [11] &quot;DOLARES&quot; &quot;U_S_M2&quot; ## [13] &quot;AMBIENTES&quot; &quot;ANTIGUEDAD&quot; ## [15] &quot;BAÑOS&quot; &quot;DIRECCION&quot; ## [17] &quot;LOCATION&quot; &quot;PUBLICADO&quot; ## [19] &quot;PROCESADO&quot; &quot;URL&quot; ## [21] &quot;REVISION&quot; &quot;NOTA&quot; ## [23] &quot;DIRECCION_NORMALIZADA&quot; &quot;BARRIO&quot; ## [25] &quot;COMUNA&quot; &quot;CODIGO_POSTAL&quot; ## [27] &quot;CODIGO_POSTAL_ARGENTINO&quot; &quot;LATITUD&quot; ## [29] &quot;LONGITUD&quot; head(dptos_2016) ## CALLE NUMERO ID_ZONAPRO OPERACION TIPO M2 M2CUB PRECIOTEXT ## 1 GUATEMALA 5574 42408691 VTA DTO 57 50 U$S 170.150 ## 2 ZAPATA 300 42408710 VTA DTO 46 46 U$S 118.650 ## 3 ZAPATA 300 42518390 VTA DTO 61 56 U$S 181.470 ## 4 ZAPATA 300 42518402 VTA DTO 140 76 U$S 320.000 ## 5 JUSTO, JUAN B. AV. 2300 42621693 VTA DTO 39 33 U$S 82.116 ## 6 JUSTO, JUAN B. AV. 2300 42621702 VTA DTO 39 34 U$S 81.921 ## PRECIOARS PRECIOARSM DOLARES U_S_M2 AMBIENTES ANTIGUEDAD BAÑOS ## 1 2977625 59553 170150 3403 2 2016 1 ## 2 2076375 45139 118650 2579 0 2016 1 ## 3 3175725 56709 181470 3241 2 2016 1 ## 4 5600000 73684 320000 4211 2 2016 1 ## 5 1437030 43546 82116 2488 0 2016 1 ## 6 1433617 42165 81921 2409 0 2016 1 ## DIRECCION ## 1 GUATEMALA 5574 ## 2 ZAPATA 300 ## 3 ZAPATA 300 ## 4 ZAPATA 300 ## 5 JUSTO JUAN B. AVDA. AL 2300 ## 6 JUSTO JUAN B. AVDA. AL 2300 ## LOCATION PUBLICADO ## 1 GUATEMALA 5574 PALERMO HOLLYWOOD PALERMO 27/11/2016 ## 2 ZAPATA 300 BELGRANO CAPITAL FEDERAL 27/11/2016 ## 3 ZAPATA 300 BELGRANO CAPITAL FEDERAL 27/11/2016 ## 4 ZAPATA 300 BELGRANO CAPITAL FEDERAL 27/11/2016 ## 5 JUSTO JUAN B. AVDA. AL 2300 VILLA CRESPO CAPITAL FEDERAL 27/7/2016 ## 6 JUSTO JUAN B. AVDA. AL 2300 VILLA CRESPO CAPITAL FEDERAL 27/7/2016 ## PROCESADO URL REVISION ## 1 12/10/2017 HTTP://WWW.ZONAPROP.COM.AR/PROPIEDADES/A-42408691.HTML NA ## 2 12/10/2017 HTTP://WWW.ZONAPROP.COM.AR/PROPIEDADES/A-42408710.HTML NA ## 3 11/10/2017 HTTP://WWW.ZONAPROP.COM.AR/PROPIEDADES/A-42518390.HTML NA ## 4 11/10/2017 HTTP://WWW.ZONAPROP.COM.AR/PROPIEDADES/A-42518402.HTML NA ## 5 10/10/2017 HTTP://WWW.ZONAPROP.COM.AR/PROPIEDADES/A-42621693.HTML NA ## 6 10/10/2017 HTTP://WWW.ZONAPROP.COM.AR/PROPIEDADES/A-42621702.HTML NA ## NOTA DIRECCION_NORMALIZADA BARRIO COMUNA CODIGO_POSTAL ## 1 NA GUATEMALA 5574 PALERMO COMUNA 14 1425 ## 2 NA ZAPATA 300 PALERMO COMUNA 14 1426 ## 3 NA ZAPATA 300 PALERMO COMUNA 14 1426 ## 4 NA ZAPATA 300 PALERMO COMUNA 14 1426 ## 5 NA JUSTO, JUAN B. AV. 2300 VILLA CRESPO COMUNA 15 1414 ## 6 NA JUSTO, JUAN B. AV. 2300 VILLA CRESPO COMUNA 15 1414 ## CODIGO_POSTAL_ARGENTINO LATITUD LONGITUD ## 1 C1425BVH -34.58058 -58.43176 ## 2 C1426AED -34.57387 -58.44061 ## 3 C1426AED -34.57387 -58.44061 ## 4 C1426AED -34.57387 -58.44061 ## 5 C1414CWY -34.59298 -58.44154 ## 6 C1414CWY -34.59298 -58.44154 El dataset contiene 29 columnas (mucha información!). Por lo tanto, debemos revisar las variables y hacer una preselección para incluir solo aquellas que consideremos relevantes para nuestro modelo: La variable a predecir (dependiente) será el valor del m2 de los departamentos (U_S_M2) en CABA. Las variables predictoras (independientes) serán: cantidad de ambientes (AMBIENTES), años de antiguedad de la construcción (ANTIGUEDAD), cantidad de baños (BAÑOS), superficie total (M2), superficie cubierta (M2CUB), barrio al que pertenece (BARRIO) y coordenadas (LATITUD, LONGITUD). dptos_2016 &lt;- dptos_2016 %&gt;% select(-CALLE, -NUMERO, -ID_ZONAPRO, -OPERACION, -TIPO, -PRECIOTEXT, -PRECIOARS, -PRECIOARSM, -DOLARES, -DIRECCION, -LOCATION, -PUBLICADO, -PROCESADO, -URL, -REVISION, -NOTA, -DIRECCION_NORMALIZADA, -COMUNA, -CODIGO_POSTAL, -CODIGO_POSTAL_ARGENTINO) Ahora veamos un resumen del contenido: summary(dptos_2016) ## M2 M2CUB U_S_M2 AMBIENTES ## Min. : 15.00 Min. : 0.00 Min. : 0 Min. : 0.000 ## 1st Qu.: 41.00 1st Qu.: 37.00 1st Qu.: 2242 1st Qu.: 2.000 ## Median : 54.00 Median : 47.00 Median : 2651 Median : 2.000 ## Mean : 70.38 Mean : 61.12 Mean : 2804 Mean : 2.456 ## 3rd Qu.: 80.00 3rd Qu.: 70.00 3rd Qu.: 3131 3rd Qu.: 3.000 ## Max. :730.00 Max. :625.00 Max. :12500 Max. :10.000 ## ## ANTIGUEDAD BAÑOS BARRIO LATITUD ## Min. : 0.0 Min. :0.00 :1382 Min. :-34.68 ## 1st Qu.: 1.0 1st Qu.:1.00 CABALLITO : 643 1st Qu.:-34.62 ## Median : 30.0 Median :1.00 PALERMO : 629 Median :-34.60 ## Mean : 710.6 Mean :1.25 SAN CRISTOBAL: 563 Mean :-34.60 ## 3rd Qu.:2016.0 3rd Qu.:2.00 VILLA CRESPO : 532 3rd Qu.:-34.58 ## Max. :2016.0 Max. :6.00 BELGRANO : 473 Max. :-34.54 ## (Other) :3342 NA&#39;s :1382 ## LONGITUD ## Min. :-58.53 ## 1st Qu.:-58.45 ## Median :-58.43 ## Mean :-58.43 ## 3rd Qu.:-58.41 ## Max. :-58.35 ## NA&#39;s :1382 7.4 Paso 3: Limpiar los datos 7.4.1 Imputar valores faltantes Es habitual que los algoritmos empleados para ML no acepten datos faltantes. Es por eso que la limpieza básica de un dataset casi siempre incluye la imputación de datos no disponibles, evitando descartar por incompletas filas que contienen información valiosa en sus campos si disponibles. Hasta acá pudimos observar varias inconsistencias en los datos como por ejemplo: La variable M2CUB tiene valor 0 en algunos registros. Suponiendo que hubo un error en la carga de los datos, cuando M2CUB&lt;15 vamos a imputar el valor de M2, asumiendo que esa propiedad no tiene m2 descubiertos. Hay casos donde M2CUB&gt;M2. Acá le imputaremos el valor del M2CUB al M2. En la variable ANTIGUEDAD aparecen algunos registros con el valor 2016. Suponiendo que esas propiedades se construyeron en ese año, se imputará una antiguedad 0 ya que se fue en el mismo año del relevamiento. Las variables AMBIENTES y BAÑOS tiene 0 en algunos registros. Imputaremos estos datos entendiendo que cuando AMBIENTES=0, es un monoambiente, y que cuando BAÑOS=0, es porque tienen 1 solo. Hay 1382 valores faltantes en las columnas LONGITUD y LATITUD, y a su vez estos registros tampoco tienen comuna o barrio asignado, por lo tanto como nos va a resultar imposible ubicarlos en el espacio, debemos eliminarlos. Por último, se puede ver que la variable a predecir (U_S_M2) varía entre 0 y 12500. Claramente ninguna propiedad puede tener un U_S_M2=0 o menos de 500 así que estos registros se filtrarán ya que son pocos casos. dptos_2016 &lt;- dptos_2016 %&gt;% mutate(M2CUB=ifelse(M2CUB&lt;15, M2, M2CUB), M2=ifelse(M2CUB&gt;M2, M2CUB, M2), ANTIGUEDAD=ifelse(ANTIGUEDAD==2016, 0, ANTIGUEDAD), BAÑOS = ifelse(BAÑOS==0, 1, BAÑOS), AMBIENTES = ifelse(AMBIENTES==0, 1, AMBIENTES)) %&gt;% filter(U_S_M2&gt;500, !is.na(LATITUD), !is.na(LONGITUD)) Ya tenemos preparadas las variables para nuestro modelo, pero aún estamos a tiempo de generar algunas nuevas que consideremos que lo mejorarían por tener capacidad predictiva sobre el valor del m2. Por ejemplo, probemos calculando los metros descubiertos (M2DESC) de cada propiedad, ya que, es muy probable que tener alguna expansión (balcón o terraza) le de un valor agregado al departamento. dptos_2016 &lt;- dptos_2016 %&gt;% mutate(M2DESC=M2-M2CUB) Ahora sí, volvamos a ver el resumen: summary(dptos_2016) ## M2 M2CUB U_S_M2 AMBIENTES ## Min. : 15.00 Min. : 15.00 Min. : 608 Min. : 1.000 ## 1st Qu.: 41.00 1st Qu.: 38.00 1st Qu.: 2230 1st Qu.: 2.000 ## Median : 53.00 Median : 47.00 Median : 2631 Median : 2.000 ## Mean : 68.44 Mean : 60.28 Mean : 2768 Mean : 2.518 ## 3rd Qu.: 78.00 3rd Qu.: 69.00 3rd Qu.: 3107 3rd Qu.: 3.000 ## Max. :730.00 Max. :625.00 Max. :10555 Max. :10.000 ## ## ANTIGUEDAD BAÑOS BARRIO LATITUD ## Min. : 0.000 Min. :1.000 CABALLITO : 643 Min. :-34.68 ## 1st Qu.: 0.000 1st Qu.:1.000 PALERMO : 629 1st Qu.:-34.62 ## Median : 0.000 Median :1.000 SAN CRISTOBAL: 563 Median :-34.60 ## Mean : 8.896 Mean :1.331 VILLA CRESPO : 532 Mean :-34.60 ## 3rd Qu.: 10.000 3rd Qu.:2.000 BELGRANO : 472 3rd Qu.:-34.58 ## Max. :110.000 Max. :6.000 RECOLETA : 406 Max. :-34.54 ## (Other) :2933 ## LONGITUD M2DESC ## Min. :-58.53 Min. : 0.000 ## 1st Qu.:-58.45 1st Qu.: 0.000 ## Median :-58.43 Median : 4.000 ## Mean :-58.43 Mean : 8.163 ## 3rd Qu.:-58.41 3rd Qu.: 8.000 ## Max. :-58.35 Max. :282.000 ## Nos hemos librado de los NA y las inconsistencias que tenían los datos. Y espiemos la distribución de algunas variables, como el valor del m2: ggplot() + geom_histogram(data = dptos_2016, aes(x = U_S_M2)) La superficie total: ggplot() + geom_histogram(data = dptos_2016, aes(x = M2)) La superficie descubierta: ggplot() + geom_histogram(data = dptos_2016, aes(x = M2DESC)) La antigüedad de las viviendas: ggplot() + geom_histogram(data = dptos_2016, aes(x = ANTIGUEDAD)) El Barrio (dado que se trata de una variable categórica en lugar de continua, usamos un gráfico de barras en lugar de un histograma): ggplot() + geom_bar(data = dptos_2016, aes(x = BARRIO)) Agreguemos una variable más: la distancia de los departamenteos a las estaciones de subte, ya que la cercanía a estas es muy probable que impacte en el valor del m2. Acá utilizaremos uno de los geoprocesos que aprendimos algunos capítulos atrás: st_distance subte_estaciones &lt;- st_read(&quot;http://bitsandbricks.github.io/data/subte_estaciones.geojson&quot;) ## Reading layer `subte_estaciones&#39; from data source `http://bitsandbricks.github.io/data/subte_estaciones.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 86 features and 3 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -58.48639 ymin: -34.64331 xmax: -58.36993 ymax: -34.55564 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs Transformemos dptos_2016 a un dataset espacial para poder medir distancias: dptos_2016 &lt;- dptos_2016 %&gt;% st_as_sf(coords = c(&quot;LONGITUD&quot;, &quot;LATITUD&quot;), crs = 4326) Y ahora calculemos la distancia (en metros) entre cada departamento en venta y la estación de subte más cercana: dptos_2016 &lt;- dptos_2016 %&gt;% mutate(DIST_SUBTE = apply(st_distance(dptos_2016, subte_estaciones), 1, function(x) min(x))) Veamos un resumen de los resultados: summary(dptos_2016$DIST_SUBTE) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.35 282.77 477.19 706.81 762.33 5658.53 El departamento ubicado a menor distancia de alguna estación de subte es a 1.35 metros y el que está a mayor distancia es a 5658 metros. Sin embargo, en promedio, las propiedades se ubican a 706 metros de alguna estación. Nuestro dataset lo transformamos en espacial para medir distancias, pero como queremos utilizar LATITUD y LONGITUD para el modelo, debemos volver a separar las coordenadas y transformarlo en dataframe tradicional: dptos_2016 &lt;- dptos_2016 %&gt;% mutate(LATITUD = unlist(map(dptos_2016$geometry,1)), LONGITUD = unlist(map(dptos_2016$geometry,2))) %&gt;% st_set_geometry(NULL) 7.4.2 Codificar variables categóricas Rara vez es posible utilizar columnas categóricas en modelos estadísticos, pero por suerte podemos recurrir a la alternativa de reemplazar una columna de datos categóricos por una serie de variables binarias, o “dummy”. En nuestro dataset solo tenemos una variable categórica: BARRIO. Entonces, en lugar de… dpto BARRIO A PALERMO B BELGRANO C SAN TELMO … deberíamo tener algo así como: caso PALERMO BELGRANO SAN TELMO A 1 0 0 B 0 1 0 C 0 0 1 Como buen lenguaje creado por y para practicantes del análisis estadístico, R trae una función específica para realizar ésta tarea, model.matrix(). Se usa así: dptos_2016 &lt;- dptos_2016 %&gt;% mutate(BARRIO=str_replace_all(BARRIO, &quot; &quot;, &quot;_&quot;)) matriz_categorias_barrios &lt;- model.matrix(data = dptos_2016, ~ BARRIO - 1) y el resultado es, ni más ni menos, una matriz de variables binarias que representan las categorías originales: head(matriz_categorias_barrios) ## BARRIOAGRONOMIA BARRIOALMAGRO BARRIOBALVANERA BARRIOBARRACAS BARRIOBELGRANO ## 1 0 0 0 0 0 ## 2 0 0 0 0 0 ## 3 0 0 0 0 0 ## 4 0 0 0 0 0 ## 5 0 0 0 0 0 ## 6 0 0 0 0 0 ## BARRIOBOCA BARRIOBOEDO BARRIOCABALLITO BARRIOCHACARITA BARRIOCOGHLAN ## 1 0 0 0 0 0 ## 2 0 0 0 0 0 ## 3 0 0 0 0 0 ## 4 0 0 0 0 0 ## 5 0 0 0 0 0 ## 6 0 0 0 0 0 ## BARRIOCOLEGIALES BARRIOCONSTITUCION BARRIOFLORES BARRIOFLORESTA BARRIOLINIERS ## 1 0 0 0 0 0 ## 2 0 0 0 0 0 ## 3 0 0 0 0 0 ## 4 0 0 0 0 0 ## 5 0 0 0 0 0 ## 6 0 0 0 0 0 ## BARRIOMATADEROS BARRIOMONSERRAT BARRIOMONTE_CASTRO BARRIONUEVA_POMPEYA ## 1 0 0 0 0 ## 2 0 0 0 0 ## 3 0 0 0 0 ## 4 0 0 0 0 ## 5 0 0 0 0 ## 6 0 0 0 0 ## BARRIONUÑEZ BARRIOPALERMO BARRIOPARQUE_AVELLANEDA BARRIOPARQUE_CHACABUCO ## 1 0 1 0 0 ## 2 0 1 0 0 ## 3 0 1 0 0 ## 4 0 1 0 0 ## 5 0 0 0 0 ## 6 0 0 0 0 ## BARRIOPARQUE_CHAS BARRIOPARQUE_PATRICIOS BARRIOPATERNAL BARRIOPUERTO_MADERO ## 1 0 0 0 0 ## 2 0 0 0 0 ## 3 0 0 0 0 ## 4 0 0 0 0 ## 5 0 0 0 0 ## 6 0 0 0 0 ## BARRIORECOLETA BARRIORETIRO BARRIOSAAVEDRA BARRIOSAN_CRISTOBAL ## 1 0 0 0 0 ## 2 0 0 0 0 ## 3 0 0 0 0 ## 4 0 0 0 0 ## 5 0 0 0 0 ## 6 0 0 0 0 ## BARRIOSAN_NICOLAS BARRIOSAN_TELMO BARRIOVELEZ_SARSFIELD BARRIOVERSALLES ## 1 0 0 0 0 ## 2 0 0 0 0 ## 3 0 0 0 0 ## 4 0 0 0 0 ## 5 0 0 0 0 ## 6 0 0 0 0 ## BARRIOVILLA_CRESPO BARRIOVILLA_DEL_PARQUE BARRIOVILLA_DEVOTO ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 1 0 0 ## 6 1 0 0 ## BARRIOVILLA_GRAL._MITRE BARRIOVILLA_LUGANO BARRIOVILLA_LURO ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## BARRIOVILLA_ORTUZAR BARRIOVILLA_PUEYRREDON BARRIOVILLA_REAL ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## BARRIOVILLA_SANTA_RITA BARRIOVILLA_SOLDATI BARRIOVILLA_URQUIZA ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 Pronto agregaremos la matriz a nuestro dataframe, pero antes terminemos con otros ajustes pendientes. 7.4.3 Unificar la escala de las variables numéricas Éste paso siempre es necesario cuando estamos trabajando con variables que utilizan distintas unidades de medida. Aquí tenemos superficies, ambientes, años de antigüedad… de todo. Muchos algoritmos asumen que todas las variables tienen escalas comparables, lo cual genera problemas con las que alcanzan los valores más altos (como m2, que a 730) versus las que tienen rangos mucho menores (como cantidad de baños, que llega a 6). Si las dejásemos así, varias de las técnicas habituales del ML adjudicarían mucho más peso a las variables con números grandes, “despreciando” a las que por su naturaleza se mueven en rango más reducidos. En todo caso, no importa lo disimiles que sean las unidades de medida, la solución es simple: convertimos todas las variables a la famosa “distribución Z”, o función de estandarización, que convierte variables a una escala sin unidad de medida, que expresa cada valor como la cantidad de desvíos estándar que lo alejan de la media. Expresar todas las variables numéricas en forma de “z scores”, o “valores z”, las hace directamente comparables entre sí. En R disponemos de la función scale(), que obtiene los z-scores. Tomaremos entonces nuestro dataframe y usaremos mutate_all() para aplicar una función a todas las columnas restantes de un tirón. Eso si, quitando antes ciertas variables: las variables categóricas (que no tiene sentido pasar a z-scores porque no son variables numéricas), y la variable que estamos intentando predecir, ya que su escala no afecta los modelos y podemos dejarla en su formato original fácil de interpretar. dptos_2016 &lt;- dptos_2016 %&gt;% select(-BARRIO) %&gt;% mutate_all(funs(scale)) %&gt;% mutate(U_S_M2 = dptos_2016$U_S_M2) Y obsérvese que scale() mediante, ahora todas las variables tienen promedio igual a 0, y se mueven en el mismo rango … y sin que esto haya cambiado la forma de las distribuciones. Compárense ahora con las que examinamos al inicio, La superficie total: ggplot() + geom_histogram(data = dptos_2016, aes(x = M2)) La superficie descubierta: ggplot() + geom_histogram(data = dptos_2016, aes(x = M2DESC)) La antigüedad de las viviendas: ggplot() + geom_histogram(data = dptos_2016, aes(x = ANTIGUEDAD)) ¡Las formas son iguales! no hemos hemos perdido “información” respecto a que tan típico o extremo es cada valor, y hemos ganado la posibilidad de comparar en forma directa todas las variables. 7.4.4 Consolidar todas las variables generadas ad-hoc en un sólo dataframe Nos ha quedado por un lado un dataframe de variables numéricas estandarizadas, y por otro una matriz que representa la pertenencia de cada departamento a un barrio de la Ciudad. Primero convertimos la matriz en dataframe (paso simple ya éstas estructura de datos son muy similares entre si), y luego unimos las columnas de ambos con la función cbind(): matriz_categorias_barrios &lt;- as.data.frame(matriz_categorias_barrios) dptos_2016 &lt;- dptos_2016 %&gt;% cbind(matriz_categorias_barrios) Ya tenemos tenemos los datos limpios y en orden. 7.5 Paso 4: Crear sets de entrenamiento y de testeo Para poder evaluar la calidad de un modelo predictivo, es práctica común dividir los datos disponibles en dos porciones. Una parte será utilizada para “entrenar” el modelo de ML, es decir se le permitirá al algoritmo acceder a esos datos para establecer la forma en que cada variable predictora incide en la que se quiere predecir. El resto será preservado y utilizado para “tomarle examen” al modelo: se le mostraran sólo las variables predictoras de esos datos, pidiendo al modelo una predicción del valor a estimar para cada una. Por último, contrastando aciertos y errores, se podrá establecer el grado de precisión del modelo. Incluso podríamos tener varios modelos distintos, obtenidos con distintas técnicas de ML. No es difícil, ya que una vez que los datos han sido obtenidos y preparados, nada impide usarlos como insumo de distintos algoritmos. En ese caso, se puede comparar la performance de los distintos modelos evaluando cual acierta mejor con la data de testeo. Definamos entonces cuales filas van al set de entrenamiento, y cuáles al de testeo, eligiéndolas al azar. De acuerdo a distintas recetas, a veces se separa el 90% de los datos para entrenamiento y el resto para testeo, otras veces es mitad y mitad… ya que siempre es más o menos arbitrario, aquí usaremos el 80% para entrenar, y el 20% para testear. #definimos a mano la &quot;semilla&quot; de aleatorización para obtener resultados reproducibles set.seed(1111) Tomamos al azar el 80% de las posiciones entre 1 y la cantidad total de filas de nuestro dataset: seleccion &lt;- sample(1:nrow(dptos_2016), size = nrow(dptos_2016) * 0.8) entrenamiento &lt;- dptos_2016 %&gt;% filter(row_number() %in% seleccion) # el testeo es el set opuesto - aquellas filas cuya posición no está entre las seleccionadas # el operador ! convierte una proposición en negativa testeo &lt;- dptos_2016 %&gt;% filter(!(row_number() %in% seleccion)) Ahora si, por fin, apliquemos un poco de machine learning. 7.5.1 Paso 5: Entrenar y testear un modelo Random Forest, una implementación de árboles de decisión como los ilustrados en “Una introducción visual al machine learning”: modelo_RF &lt;- randomForest(data = entrenamiento, U_S_M2 ~ ., ntree = 500, importance = TRUE) # el parámetro &quot;importance&quot;: Define si el modelo estimará la importancia relativa de cada predictor en la calidad de la predicción -es decir, cuales variables son más importantes para predecir # resultados: modelo_RF ## ## Call: ## randomForest(formula = U_S_M2 ~ ., data = entrenamiento, ntree = 500, importance = TRUE) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 18 ## ## Mean of squared residuals: 165967.1 ## % Var explained: 76.55 Según dice allí, el modelo puede explicar casi el 80% de la varianza de valores encontrada entre los departamentos en venta en 2016 en base a las variables predictoras que empleamos. ¿Qué tiene dentro el modelo? summary(modelo_RF) ## Length Class Mode ## call 5 -none- call ## type 1 -none- character ## predicted 4942 -none- numeric ## mse 500 -none- numeric ## rsq 500 -none- numeric ## oob.times 4942 -none- numeric ## importance 112 -none- numeric ## importanceSD 56 -none- numeric ## localImportance 0 -none- NULL ## proximity 0 -none- NULL ## ntree 1 -none- numeric ## mtry 1 -none- numeric ## forest 11 -none- list ## coefs 0 -none- NULL ## y 4942 -none- numeric ## test 0 -none- NULL ## inbag 0 -none- NULL ## terms 3 terms call De todo! Por ejemplo, “type” nos emite confirmar qué tipo de análisis realizó: Fue de regresión en este caso, pero podría haber sido otro, como clasificación (cuando se predice un atributo categórico en lugar de una variable continua): modelo_RF$type ## [1] &quot;regression&quot; O “importance”, que contiene un ranking con la importancia relativa de cada predictor, es decir cuáles son los que más ayudan a estimar el valor a predecir: modelo_RF$importance ## %IncMSE IncNodePurity ## M2 167074.9470156 267184575.80 ## M2CUB 135457.3611587 225668723.10 ## AMBIENTES 52277.8971501 64047857.65 ## ANTIGUEDAD 182526.0387114 245399435.22 ## BAÑOS 64681.6690831 106473956.16 ## M2DESC 183080.5430261 264761497.03 ## DIST_SUBTE 175595.1014987 266112334.80 ## LATITUD 416587.5836090 495386790.77 ## LONGITUD 687246.5212418 714824958.86 ## BARRIOAGRONOMIA 5.8240775 56815.15 ## BARRIOALMAGRO 3519.5707171 5498711.39 ## BARRIOBALVANERA 6118.7638268 12871966.47 ## BARRIOBARRACAS 570.1771307 1277568.37 ## BARRIOBELGRANO 59190.2620500 84952254.92 ## BARRIOBOCA 1832.9037306 7775445.23 ## BARRIOBOEDO 97.4133122 734977.42 ## BARRIOCABALLITO 23972.4340922 22442509.08 ## BARRIOCHACARITA 455.4725383 4795820.89 ## BARRIOCOGHLAN 193.2237891 837760.83 ## BARRIOCOLEGIALES 1460.8036155 5031914.64 ## BARRIOCONSTITUCION 1273.1384772 3288128.96 ## BARRIOFLORES 572.0632495 2027860.77 ## BARRIOFLORESTA 64.5978362 573233.32 ## BARRIOLINIERS 181.6202793 362768.59 ## BARRIOMATADEROS 255.6264803 848580.79 ## BARRIOMONSERRAT 3694.4926149 6663653.93 ## BARRIOMONTE_CASTRO 215.7103189 660037.96 ## BARRIONUEVA_POMPEYA 0.6799792 110671.72 ## BARRIONUÑEZ 2551.2087561 7163816.75 ## BARRIOPALERMO 96786.2217651 141530565.58 ## BARRIOPARQUE_AVELLANEDA -0.1274300 42681.02 ## BARRIOPARQUE_CHACABUCO 21888.3230863 24564481.00 ## BARRIOPARQUE_CHAS 3409.1373106 13595523.78 ## BARRIOPARQUE_PATRICIOS 420.0668951 736718.16 ## BARRIOPATERNAL 0.0000000 101935.71 ## BARRIOPUERTO_MADERO 64001.6002284 195408094.01 ## BARRIORECOLETA 25467.2782861 27510223.58 ## BARRIORETIRO 1609.0848122 7530449.82 ## BARRIOSAAVEDRA 1099.0982473 2617816.50 ## BARRIOSAN_CRISTOBAL 18846.9345260 15214434.45 ## BARRIOSAN_NICOLAS 1933.0773150 3204284.32 ## BARRIOSAN_TELMO 1.4341777 1507344.99 ## BARRIOVELEZ_SARSFIELD -5.1809270 217132.96 ## BARRIOVERSALLES -1.3455801 29519.37 ## BARRIOVILLA_CRESPO 20237.3386725 17192884.91 ## BARRIOVILLA_DEL_PARQUE 84.0611189 546234.26 ## BARRIOVILLA_DEVOTO 64.7508980 1315630.39 ## BARRIOVILLA_GRAL._MITRE 13.8231362 419921.76 ## BARRIOVILLA_LUGANO 244.5047965 1978559.22 ## BARRIOVILLA_LURO -27.0631812 627467.87 ## BARRIOVILLA_ORTUZAR 285.5320719 1692417.58 ## BARRIOVILLA_PUEYRREDON 207.7096264 738130.59 ## BARRIOVILLA_REAL 3.7251238 61017.22 ## BARRIOVILLA_SANTA_RITA 35.6007291 325280.23 ## BARRIOVILLA_SOLDATI 159.9408661 1527550.21 ## BARRIOVILLA_URQUIZA 1161.7714972 2254659.78 La columna “%IncMSE” representa el porcentaje de error promedio, la magnitud en la que el valor predicho por el modelo difiere del valor observado, cuando cada predictor se retira del modelo (es decir, cuanto peor sería la predicción si no se usara). Por eso los números mayores están asociados a los predictores de más peso, que en este caso son LONGITUD, LATITUD, M2DESC, ANTIGUEDAD y DIST_SUBTE. Además de encontrar la correlación esperable entre el valor del m2 y la superficie descubierta de las propiedades, los años de antiguedad y la distancia al subte, nuestro modelo ha encontrado que la ubicación (latitud y longitud) es la clave del valor de la propiedad… y sin saber nada de geografía ni urbanismo. En “predicted” tenemos la mediana del valor del m2 predicho para cada departamento: head(modelo_RF$predicted) ## 1 2 3 4 5 6 ## 2769.821 3375.679 3843.473 2252.623 2150.995 3112.547 Aprovechando que dentro del modelo, “y” contiene los valores observados, evaluemos en forma gráfica cuánto se aproximan las predicciones de cada departamento al valor real (el observado): ggplot() + geom_point(aes(x = modelo_RF$predicted, y = modelo_RF$y), alpha = 0.3) Se ajusta bastante bien. Luego veremos una manera de cuantificar la precisión del modelo. 7.5.2 Midiendo la performance del modelo contra datos que no conoce Veamos ahora como se comporta nuestro modelo cuando debe predecir valores de distritos que no se han utilizado para el entrenamiento, los que reservamos para el set de testeo. predicciones_test &lt;- predict(modelo_RF, newdata = testeo) head(predicciones_test) ## 1 2 3 4 5 6 ## 3487.456 2328.357 3805.220 3091.276 3195.991 3039.174 En un gráfico: ggplot() + geom_point(aes(x = predicciones_test, y = testeo$U_S_M2), alpha = 0.3) 7.5.3 Comparando performance Es práctico obtener un sólo número, un indicador simple que nos diga que tan bien predice el modelo, y así poder comparar distintos modelos entre si (o distintos datasets contra el mismo modelo) utilizando esa medida. En estadística es común el uso del RMSE como indicador de grado de ajuste, o “Root Mean Square Error” - la raíz cuadrada de la media de los errores al cuadrado. El modelo incluye el MSE (o sea la suma de los errores al cuadrado) que surge de comparar predicciones con valores observados. Y en el caso de un random forest, que intenta muchos árboles distintos, varios MSEs resultantes: 500 en nuestro caso, uno por cada árbol trazado. Tomamos la media de todos los MSE para obtener un valor general, y luego tomamos la raíz cuadrada para obtener el RMSE: RMSE &lt;- modelo_RF$mse %&gt;% mean() %&gt;% sqrt() RMSE ## [1] 412.5729 Eso significa que la diferencia promedio entre valor esperado y valor hallado para cada distrito fue de 412.5729162 dólares. Y en comparación, ¿qué tan bueno resultó el modelo cuando se aplicó a datos que no conocía? RMSE_test &lt;- sqrt(mean((predicciones_test - testeo$U_S_M2)^2)) RMSE_test ## [1] 419.6728 Con un valor medio de error de 419.6728037 dólares, el modelo ha funcionado muy bien con datos desconocidos, incluso mejorando levemente su performance respecto al set de training. Esto indica que no sufre de “overfitting”, la condición de estar excesivamente ajustado a los datos con los que fue entrenado. Por eso el modelo no pierde precisión cuando lidia con datos nuevos. Como despedida, volvamos al examen visual. Representamos en un gráfico cada valor predicho y cada valor observado para los datos de entrenamiento: ggplot() + geom_point(aes(x = 1:length(predicciones_test), y = predicciones_test), color = &quot;salmon&quot;, alpha = .5, size = .5) + geom_point(aes(x = 1:nrow(testeo), y = testeo$U_S_M2), color = &quot;lightblue&quot;, alpha = .5, size = .5) + labs(x = &quot;valores predichos&quot;, y = &quot;valores observados&quot;) + theme_minimal() "]
]
